// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/dexon-foundation/dexon/core/vm/sqlvm/ast"
	se "github.com/dexon-foundation/dexon/core/vm/sqlvm/errors"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "S",
			pos:  position{line: 10, col: 1, offset: 150},
			expr: &actionExpr{
				pos: position{line: 11, col: 5, offset: 156},
				run: (*parser).callonS1,
				expr: &seqExpr{
					pos: position{line: 11, col: 5, offset: 156},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 11, col: 5, offset: 156},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 7, offset: 158},
							label: "x",
							expr: &zeroOrOneExpr{
								pos: position{line: 11, col: 9, offset: 160},
								expr: &ruleRefExpr{
									pos:  position{line: 11, col: 9, offset: 160},
									name: "Stmt",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 15, offset: 166},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 17, offset: 168},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 11, col: 20, offset: 171},
								expr: &actionExpr{
									pos: position{line: 11, col: 22, offset: 173},
									run: (*parser).callonS10,
									expr: &seqExpr{
										pos: position{line: 11, col: 22, offset: 173},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 11, col: 22, offset: 173},
												val:        ";",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 26, offset: 177},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 11, col: 28, offset: 179},
												label: "s",
												expr: &zeroOrOneExpr{
													pos: position{line: 11, col: 30, offset: 181},
													expr: &ruleRefExpr{
														pos:  position{line: 11, col: 30, offset: 181},
														name: "Stmt",
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 36, offset: 187},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 59, offset: 210},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Stmt",
			pos:  position{line: 26, col: 1, offset: 503},
			expr: &choiceExpr{
				pos: position{line: 27, col: 4, offset: 511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 27, col: 4, offset: 511},
						name: "SelectStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 4, offset: 525},
						name: "UpdateStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 4, offset: 539},
						name: "DeleteStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 30, col: 4, offset: 553},
						name: "InsertStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 31, col: 4, offset: 567},
						name: "CreateTableStmt",
					},
					&ruleRefExpr{
						pos:  position{line: 32, col: 4, offset: 586},
						name: "CreateIndexStmt",
					},
				},
			},
		},
		{
			name: "SelectStmt",
			pos:  position{line: 34, col: 1, offset: 603},
			expr: &actionExpr{
				pos: position{line: 35, col: 4, offset: 617},
				run: (*parser).callonSelectStmt1,
				expr: &seqExpr{
					pos: position{line: 35, col: 4, offset: 617},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 35, col: 4, offset: 617},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 6, offset: 619},
								name: "SelectToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 36, col: 2, offset: 632},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 36, col: 4, offset: 634},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 6, offset: 636},
								name: "SelectColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 36, col: 19, offset: 649},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 36, col: 22, offset: 652},
								expr: &actionExpr{
									pos: position{line: 36, col: 24, offset: 654},
									run: (*parser).callonSelectStmt10,
									expr: &seqExpr{
										pos: position{line: 36, col: 24, offset: 654},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 36, col: 24, offset: 654},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 36, col: 26, offset: 656},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 36, col: 41, offset: 671},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 36, col: 43, offset: 673},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 36, col: 45, offset: 675},
													name: "SelectColumn",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 37, col: 2, offset: 710},
							label: "table",
							expr: &zeroOrOneExpr{
								pos: position{line: 37, col: 8, offset: 716},
								expr: &actionExpr{
									pos: position{line: 37, col: 10, offset: 718},
									run: (*parser).callonSelectStmt19,
									expr: &seqExpr{
										pos: position{line: 37, col: 10, offset: 718},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 37, col: 10, offset: 718},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 37, col: 12, offset: 720},
												name: "FromToken",
											},
											&ruleRefExpr{
												pos:  position{line: 37, col: 22, offset: 730},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 37, col: 24, offset: 732},
												label: "i",
												expr: &ruleRefExpr{
													pos:  position{line: 37, col: 26, offset: 734},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 2, offset: 767},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 38, col: 8, offset: 773},
								expr: &actionExpr{
									pos: position{line: 38, col: 10, offset: 775},
									run: (*parser).callonSelectStmt28,
									expr: &seqExpr{
										pos: position{line: 38, col: 10, offset: 775},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 38, col: 10, offset: 775},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 38, col: 12, offset: 777},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 38, col: 14, offset: 779},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 2, offset: 813},
							label: "group",
							expr: &zeroOrOneExpr{
								pos: position{line: 39, col: 8, offset: 819},
								expr: &actionExpr{
									pos: position{line: 39, col: 10, offset: 821},
									run: (*parser).callonSelectStmt35,
									expr: &seqExpr{
										pos: position{line: 39, col: 10, offset: 821},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 39, col: 10, offset: 821},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 39, col: 12, offset: 823},
												label: "g",
												expr: &ruleRefExpr{
													pos:  position{line: 39, col: 14, offset: 825},
													name: "GroupByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 2, offset: 861},
							label: "order",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 8, offset: 867},
								expr: &actionExpr{
									pos: position{line: 40, col: 10, offset: 869},
									run: (*parser).callonSelectStmt42,
									expr: &seqExpr{
										pos: position{line: 40, col: 10, offset: 869},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 40, col: 10, offset: 869},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 40, col: 12, offset: 871},
												label: "or",
												expr: &ruleRefExpr{
													pos:  position{line: 40, col: 15, offset: 874},
													name: "OrderByClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 41, col: 2, offset: 911},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 41, col: 8, offset: 917},
								expr: &actionExpr{
									pos: position{line: 41, col: 10, offset: 919},
									run: (*parser).callonSelectStmt49,
									expr: &seqExpr{
										pos: position{line: 41, col: 10, offset: 919},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 41, col: 10, offset: 919},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 41, col: 12, offset: 921},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 41, col: 14, offset: 923},
													name: "LimitClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 2, offset: 957},
							label: "offset",
							expr: &zeroOrOneExpr{
								pos: position{line: 42, col: 9, offset: 964},
								expr: &actionExpr{
									pos: position{line: 42, col: 11, offset: 966},
									run: (*parser).callonSelectStmt56,
									expr: &seqExpr{
										pos: position{line: 42, col: 11, offset: 966},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 42, col: 11, offset: 966},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 42, col: 13, offset: 968},
												label: "of",
												expr: &ruleRefExpr{
													pos:  position{line: 42, col: 16, offset: 971},
													name: "OffsetClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectColumn",
			pos:  position{line: 79, col: 1, offset: 2038},
			expr: &choiceExpr{
				pos: position{line: 80, col: 4, offset: 2054},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 80, col: 4, offset: 2054},
						name: "AnyLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 4, offset: 2068},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "UpdateStmt",
			pos:  position{line: 83, col: 1, offset: 2074},
			expr: &actionExpr{
				pos: position{line: 84, col: 4, offset: 2088},
				run: (*parser).callonUpdateStmt1,
				expr: &seqExpr{
					pos: position{line: 84, col: 4, offset: 2088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 84, col: 4, offset: 2088},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 6, offset: 2090},
								name: "UpdateToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 85, col: 2, offset: 2103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 85, col: 4, offset: 2105},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 10, offset: 2111},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 2, offset: 2123},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 86, col: 4, offset: 2125},
							name: "SetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 87, col: 2, offset: 2135},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 87, col: 4, offset: 2137},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 87, col: 6, offset: 2139},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 17, offset: 2150},
							label: "as",
							expr: &zeroOrMoreExpr{
								pos: position{line: 87, col: 20, offset: 2153},
								expr: &actionExpr{
									pos: position{line: 87, col: 22, offset: 2155},
									run: (*parser).callonUpdateStmt15,
									expr: &seqExpr{
										pos: position{line: 87, col: 22, offset: 2155},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 87, col: 22, offset: 2155},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 87, col: 24, offset: 2157},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 87, col: 39, offset: 2172},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 87, col: 41, offset: 2174},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 87, col: 43, offset: 2176},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 88, col: 2, offset: 2209},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 88, col: 8, offset: 2215},
								expr: &actionExpr{
									pos: position{line: 88, col: 10, offset: 2217},
									run: (*parser).callonUpdateStmt24,
									expr: &seqExpr{
										pos: position{line: 88, col: 10, offset: 2217},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 88, col: 10, offset: 2217},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 88, col: 12, offset: 2219},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 88, col: 14, offset: 2221},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DeleteStmt",
			pos:  position{line: 106, col: 1, offset: 2735},
			expr: &actionExpr{
				pos: position{line: 107, col: 4, offset: 2749},
				run: (*parser).callonDeleteStmt1,
				expr: &seqExpr{
					pos: position{line: 107, col: 4, offset: 2749},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 107, col: 4, offset: 2749},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 7, offset: 2752},
								name: "DeleteToken",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 19, offset: 2764},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 22, offset: 2767},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 24, offset: 2769},
							label: "v3",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 27, offset: 2772},
								name: "FromToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 2, offset: 2783},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 108, col: 4, offset: 2785},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 10, offset: 2791},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 2, offset: 2803},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 8, offset: 2809},
								expr: &actionExpr{
									pos: position{line: 109, col: 10, offset: 2811},
									run: (*parser).callonDeleteStmt14,
									expr: &seqExpr{
										pos: position{line: 109, col: 10, offset: 2811},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 109, col: 10, offset: 2811},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 109, col: 12, offset: 2813},
												label: "w",
												expr: &ruleRefExpr{
													pos:  position{line: 109, col: 14, offset: 2815},
													name: "WhereClause",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertStmt",
			pos:  position{line: 123, col: 1, offset: 3170},
			expr: &actionExpr{
				pos: position{line: 124, col: 4, offset: 3184},
				run: (*parser).callonInsertStmt1,
				expr: &seqExpr{
					pos: position{line: 124, col: 4, offset: 3184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 124, col: 4, offset: 3184},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 7, offset: 3187},
								name: "InsertToken",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 19, offset: 3199},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 22, offset: 3202},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 24, offset: 3204},
							label: "v3",
							expr: &ruleRefExpr{
								pos:  position{line: 124, col: 27, offset: 3207},
								name: "IntoToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 2, offset: 3218},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 4, offset: 3220},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 10, offset: 3226},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 2, offset: 3238},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 4, offset: 3240},
							label: "insert",
							expr: &choiceExpr{
								pos: position{line: 126, col: 13, offset: 3249},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 126, col: 13, offset: 3249},
										name: "InsertWithColumnClause",
									},
									&ruleRefExpr{
										pos:  position{line: 126, col: 38, offset: 3274},
										name: "InsertWithDefaultClause",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertValue",
			pos:  position{line: 145, col: 1, offset: 3791},
			expr: &actionExpr{
				pos: position{line: 146, col: 4, offset: 3806},
				run: (*parser).callonInsertValue1,
				expr: &seqExpr{
					pos: position{line: 146, col: 4, offset: 3806},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 4, offset: 3806},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 8, offset: 3810},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 10, offset: 3812},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 12, offset: 3814},
								name: "MultiExprWithDefault",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 33, offset: 3835},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 146, col: 35, offset: 3837},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "CreateTableStmt",
			pos:  position{line: 149, col: 1, offset: 3860},
			expr: &actionExpr{
				pos: position{line: 150, col: 4, offset: 3879},
				run: (*parser).callonCreateTableStmt1,
				expr: &seqExpr{
					pos: position{line: 150, col: 4, offset: 3879},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 4, offset: 3879},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 7, offset: 3882},
								name: "CreateToken",
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 19, offset: 3894},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 22, offset: 3897},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 150, col: 24, offset: 3899},
							label: "v3",
							expr: &ruleRefExpr{
								pos:  position{line: 150, col: 27, offset: 3902},
								name: "TableToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 2, offset: 3914},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 151, col: 4, offset: 3916},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 151, col: 10, offset: 3922},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 2, offset: 3934},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 152, col: 4, offset: 3936},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 153, col: 2, offset: 3941},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 153, col: 4, offset: 3943},
							label: "column",
							expr: &zeroOrOneExpr{
								pos: position{line: 153, col: 11, offset: 3950},
								expr: &actionExpr{
									pos: position{line: 154, col: 3, offset: 3954},
									run: (*parser).callonCreateTableStmt17,
									expr: &seqExpr{
										pos: position{line: 154, col: 3, offset: 3954},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 154, col: 3, offset: 3954},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 154, col: 5, offset: 3956},
													name: "ColumnSchema",
												},
											},
											&labeledExpr{
												pos:   position{line: 155, col: 3, offset: 3971},
												label: "ss",
												expr: &zeroOrMoreExpr{
													pos: position{line: 155, col: 6, offset: 3974},
													expr: &actionExpr{
														pos: position{line: 155, col: 8, offset: 3976},
														run: (*parser).callonCreateTableStmt23,
														expr: &seqExpr{
															pos: position{line: 155, col: 8, offset: 3976},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 155, col: 8, offset: 3976},
																	name: "_",
																},
																&ruleRefExpr{
																	pos:  position{line: 155, col: 10, offset: 3978},
																	name: "SeparatorToken",
																},
																&ruleRefExpr{
																	pos:  position{line: 155, col: 25, offset: 3993},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 155, col: 27, offset: 3995},
																	label: "t",
																	expr: &ruleRefExpr{
																		pos:  position{line: 155, col: 29, offset: 3997},
																		name: "ColumnSchema",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 158, col: 2, offset: 4082},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 158, col: 4, offset: 4084},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ColumnSchema",
			pos:  position{line: 174, col: 1, offset: 4545},
			expr: &actionExpr{
				pos: position{line: 175, col: 4, offset: 4561},
				run: (*parser).callonColumnSchema1,
				expr: &seqExpr{
					pos: position{line: 175, col: 4, offset: 4561},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 175, col: 4, offset: 4561},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 6, offset: 4563},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 2, offset: 4575},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 176, col: 4, offset: 4577},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 6, offset: 4579},
								name: "DataType",
							},
						},
						&labeledExpr{
							pos:   position{line: 177, col: 2, offset: 4589},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 177, col: 5, offset: 4592},
								expr: &actionExpr{
									pos: position{line: 177, col: 7, offset: 4594},
									run: (*parser).callonColumnSchema10,
									expr: &seqExpr{
										pos: position{line: 177, col: 7, offset: 4594},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 177, col: 7, offset: 4594},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 177, col: 9, offset: 4596},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 177, col: 11, offset: 4598},
													name: "ColumnConstraint",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ColumnConstraint",
			pos:  position{line: 207, col: 1, offset: 5493},
			expr: &choiceExpr{
				pos: position{line: 208, col: 4, offset: 5513},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 208, col: 4, offset: 5513},
						name: "PrimaryKeyClause",
					},
					&ruleRefExpr{
						pos:  position{line: 209, col: 4, offset: 5533},
						name: "NotNullClause",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 4, offset: 5550},
						name: "UniqueClause",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 4, offset: 5566},
						name: "DefaultClause",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 4, offset: 5583},
						name: "ForeignClause",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 4, offset: 5600},
						name: "AutoincrementClause",
					},
				},
			},
		},
		{
			name: "CreateIndexStmt",
			pos:  position{line: 215, col: 1, offset: 5621},
			expr: &actionExpr{
				pos: position{line: 216, col: 4, offset: 5640},
				run: (*parser).callonCreateIndexStmt1,
				expr: &seqExpr{
					pos: position{line: 216, col: 4, offset: 5640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 216, col: 4, offset: 5640},
							label: "v1",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 7, offset: 5643},
								name: "CreateToken",
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 2, offset: 5656},
							label: "unique",
							expr: &zeroOrOneExpr{
								pos: position{line: 217, col: 9, offset: 5663},
								expr: &actionExpr{
									pos: position{line: 217, col: 11, offset: 5665},
									run: (*parser).callonCreateIndexStmt7,
									expr: &seqExpr{
										pos: position{line: 217, col: 11, offset: 5665},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 217, col: 11, offset: 5665},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 217, col: 13, offset: 5667},
												label: "u",
												expr: &ruleRefExpr{
													pos:  position{line: 217, col: 15, offset: 5669},
													name: "UniqueClause",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 2, offset: 5704},
							label: "v2",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 5, offset: 5707},
								name: "_",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 7, offset: 5709},
							label: "v3",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 10, offset: 5712},
								name: "IndexToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 2, offset: 5724},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 4, offset: 5726},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 10, offset: 5732},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 2, offset: 5744},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 4, offset: 5746},
							name: "OnToken",
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 2, offset: 5755},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 4, offset: 5757},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 10, offset: 5763},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 2, offset: 5775},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 222, col: 4, offset: 5777},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 8, offset: 5781},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 10, offset: 5783},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 12, offset: 5785},
								name: "Identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 222, col: 23, offset: 5796},
							label: "is",
							expr: &zeroOrMoreExpr{
								pos: position{line: 222, col: 26, offset: 5799},
								expr: &actionExpr{
									pos: position{line: 222, col: 28, offset: 5801},
									run: (*parser).callonCreateIndexStmt31,
									expr: &seqExpr{
										pos: position{line: 222, col: 28, offset: 5801},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 222, col: 28, offset: 5801},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 222, col: 30, offset: 5803},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 222, col: 45, offset: 5818},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 222, col: 47, offset: 5820},
												label: "x",
												expr: &ruleRefExpr{
													pos:  position{line: 222, col: 49, offset: 5822},
													name: "Identifier",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 222, col: 81, offset: 5854},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 222, col: 83, offset: 5856},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 243, col: 1, offset: 6460},
			expr: &actionExpr{
				pos: position{line: 244, col: 4, offset: 6475},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 244, col: 4, offset: 6475},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 244, col: 4, offset: 6475},
							name: "WhereToken",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 15, offset: 6486},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 17, offset: 6488},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 19, offset: 6490},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderByClause",
			pos:  position{line: 253, col: 1, offset: 6662},
			expr: &actionExpr{
				pos: position{line: 254, col: 4, offset: 6679},
				run: (*parser).callonOrderByClause1,
				expr: &seqExpr{
					pos: position{line: 254, col: 4, offset: 6679},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 254, col: 4, offset: 6679},
							name: "OrderToken",
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 2, offset: 6691},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 4, offset: 6693},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 2, offset: 6702},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 4, offset: 6704},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 6, offset: 6706},
								name: "OrderColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 257, col: 2, offset: 6719},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 257, col: 5, offset: 6722},
								expr: &actionExpr{
									pos: position{line: 257, col: 7, offset: 6724},
									run: (*parser).callonOrderByClause11,
									expr: &seqExpr{
										pos: position{line: 257, col: 7, offset: 6724},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 257, col: 7, offset: 6724},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 257, col: 9, offset: 6726},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 257, col: 24, offset: 6741},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 257, col: 26, offset: 6743},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 257, col: 28, offset: 6745},
													name: "OrderColumn",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderColumn",
			pos:  position{line: 262, col: 1, offset: 6824},
			expr: &actionExpr{
				pos: position{line: 263, col: 4, offset: 6839},
				run: (*parser).callonOrderColumn1,
				expr: &seqExpr{
					pos: position{line: 263, col: 4, offset: 6839},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 263, col: 4, offset: 6839},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 6, offset: 6841},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 2, offset: 6847},
							label: "s",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 4, offset: 6849},
								expr: &actionExpr{
									pos: position{line: 264, col: 6, offset: 6851},
									run: (*parser).callonOrderColumn7,
									expr: &seqExpr{
										pos: position{line: 264, col: 6, offset: 6851},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 264, col: 6, offset: 6851},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 8, offset: 6853},
												label: "t",
												expr: &choiceExpr{
													pos: position{line: 264, col: 12, offset: 6857},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 264, col: 12, offset: 6857},
															name: "AscToken",
														},
														&ruleRefExpr{
															pos:  position{line: 264, col: 23, offset: 6868},
															name: "DescToken",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 2, offset: 6902},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 265, col: 4, offset: 6904},
								expr: &actionExpr{
									pos: position{line: 265, col: 6, offset: 6906},
									run: (*parser).callonOrderColumn16,
									expr: &seqExpr{
										pos: position{line: 265, col: 6, offset: 6906},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 265, col: 6, offset: 6906},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 265, col: 8, offset: 6908},
												name: "NullsToken",
											},
											&ruleRefExpr{
												pos:  position{line: 265, col: 19, offset: 6919},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 21, offset: 6921},
												label: "l",
												expr: &choiceExpr{
													pos: position{line: 265, col: 25, offset: 6925},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 265, col: 25, offset: 6925},
															name: "LastToken",
														},
														&ruleRefExpr{
															pos:  position{line: 265, col: 37, offset: 6937},
															name: "FirstToken",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupByClause",
			pos:  position{line: 276, col: 1, offset: 7278},
			expr: &actionExpr{
				pos: position{line: 277, col: 4, offset: 7295},
				run: (*parser).callonGroupByClause1,
				expr: &seqExpr{
					pos: position{line: 277, col: 4, offset: 7295},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 277, col: 4, offset: 7295},
							name: "GroupToken",
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 2, offset: 7307},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 278, col: 4, offset: 7309},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 2, offset: 7318},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 4, offset: 7320},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 6, offset: 7322},
								name: "GroupColumn",
							},
						},
						&labeledExpr{
							pos:   position{line: 280, col: 2, offset: 7335},
							label: "fs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 280, col: 5, offset: 7338},
								expr: &actionExpr{
									pos: position{line: 280, col: 7, offset: 7340},
									run: (*parser).callonGroupByClause11,
									expr: &seqExpr{
										pos: position{line: 280, col: 7, offset: 7340},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 280, col: 7, offset: 7340},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 280, col: 9, offset: 7342},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 280, col: 24, offset: 7357},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 280, col: 26, offset: 7359},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 280, col: 28, offset: 7361},
													name: "GroupColumn",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GroupColumn",
			pos:  position{line: 285, col: 1, offset: 7440},
			expr: &actionExpr{
				pos: position{line: 286, col: 4, offset: 7455},
				run: (*parser).callonGroupColumn1,
				expr: &labeledExpr{
					pos:   position{line: 286, col: 4, offset: 7455},
					label: "i",
					expr: &ruleRefExpr{
						pos:  position{line: 286, col: 6, offset: 7457},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "OffsetClause",
			pos:  position{line: 295, col: 1, offset: 7624},
			expr: &actionExpr{
				pos: position{line: 296, col: 4, offset: 7640},
				run: (*parser).callonOffsetClause1,
				expr: &seqExpr{
					pos: position{line: 296, col: 4, offset: 7640},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 296, col: 4, offset: 7640},
							name: "OffsetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 16, offset: 7652},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 296, col: 18, offset: 7654},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 20, offset: 7656},
								name: "IntegerLiteral",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitClause",
			pos:  position{line: 305, col: 1, offset: 7844},
			expr: &actionExpr{
				pos: position{line: 306, col: 4, offset: 7859},
				run: (*parser).callonLimitClause1,
				expr: &seqExpr{
					pos: position{line: 306, col: 4, offset: 7859},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 306, col: 4, offset: 7859},
							name: "LimitToken",
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 15, offset: 7870},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 17, offset: 7872},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 19, offset: 7874},
								name: "IntegerLiteral",
							},
						},
					},
				},
			},
		},
		{
			name: "InsertWithColumnClause",
			pos:  position{line: 315, col: 1, offset: 8061},
			expr: &actionExpr{
				pos: position{line: 316, col: 4, offset: 8087},
				run: (*parser).callonInsertWithColumnClause1,
				expr: &seqExpr{
					pos: position{line: 316, col: 4, offset: 8087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 316, col: 4, offset: 8087},
							label: "cs",
							expr: &zeroOrOneExpr{
								pos: position{line: 316, col: 7, offset: 8090},
								expr: &actionExpr{
									pos: position{line: 316, col: 9, offset: 8092},
									run: (*parser).callonInsertWithColumnClause5,
									expr: &seqExpr{
										pos: position{line: 316, col: 9, offset: 8092},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 316, col: 9, offset: 8092},
												val:        "(",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 317, col: 4, offset: 8099},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 317, col: 6, offset: 8101},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 317, col: 8, offset: 8103},
													name: "Identifier",
												},
											},
											&labeledExpr{
												pos:   position{line: 318, col: 4, offset: 8117},
												label: "fs",
												expr: &zeroOrMoreExpr{
													pos: position{line: 318, col: 7, offset: 8120},
													expr: &actionExpr{
														pos: position{line: 318, col: 9, offset: 8122},
														run: (*parser).callonInsertWithColumnClause13,
														expr: &seqExpr{
															pos: position{line: 318, col: 9, offset: 8122},
															exprs: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 318, col: 9, offset: 8122},
																	name: "_",
																},
																&ruleRefExpr{
																	pos:  position{line: 318, col: 11, offset: 8124},
																	name: "SeparatorToken",
																},
																&ruleRefExpr{
																	pos:  position{line: 318, col: 26, offset: 8139},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 318, col: 28, offset: 8141},
																	label: "x",
																	expr: &ruleRefExpr{
																		pos:  position{line: 318, col: 30, offset: 8143},
																		name: "Identifier",
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 319, col: 4, offset: 8178},
												name: "_",
											},
											&litMatcher{
												pos:        position{line: 319, col: 6, offset: 8180},
												val:        ")",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 320, col: 4, offset: 8187},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 3, offset: 8240},
							name: "ValuesToken",
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 2, offset: 8253},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 4, offset: 8255},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 6, offset: 8257},
								name: "InsertValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 2, offset: 8270},
							label: "vs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 324, col: 5, offset: 8273},
								expr: &actionExpr{
									pos: position{line: 324, col: 7, offset: 8275},
									run: (*parser).callonInsertWithColumnClause29,
									expr: &seqExpr{
										pos: position{line: 324, col: 7, offset: 8275},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 324, col: 7, offset: 8275},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 324, col: 9, offset: 8277},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 324, col: 24, offset: 8292},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 26, offset: 8294},
												label: "y",
												expr: &ruleRefExpr{
													pos:  position{line: 324, col: 28, offset: 8296},
													name: "InsertValue",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InsertWithDefaultClause",
			pos:  position{line: 343, col: 1, offset: 8905},
			expr: &actionExpr{
				pos: position{line: 344, col: 4, offset: 8932},
				run: (*parser).callonInsertWithDefaultClause1,
				expr: &seqExpr{
					pos: position{line: 344, col: 4, offset: 8932},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 344, col: 4, offset: 8932},
							name: "DefaultToken",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 17, offset: 8945},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 19, offset: 8947},
							name: "ValuesToken",
						},
					},
				},
			},
		},
		{
			name: "PrimaryKeyClause",
			pos:  position{line: 352, col: 1, offset: 9103},
			expr: &actionExpr{
				pos: position{line: 353, col: 4, offset: 9123},
				run: (*parser).callonPrimaryKeyClause1,
				expr: &seqExpr{
					pos: position{line: 353, col: 4, offset: 9123},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 353, col: 4, offset: 9123},
							name: "PrimaryToken",
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 17, offset: 9136},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 19, offset: 9138},
							name: "KeyToken",
						},
					},
				},
			},
		},
		{
			name: "NotNullClause",
			pos:  position{line: 361, col: 1, offset: 9281},
			expr: &actionExpr{
				pos: position{line: 362, col: 4, offset: 9298},
				run: (*parser).callonNotNullClause1,
				expr: &seqExpr{
					pos: position{line: 362, col: 4, offset: 9298},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 362, col: 4, offset: 9298},
							name: "NotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 13, offset: 9307},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 15, offset: 9309},
							name: "NullToken",
						},
					},
				},
			},
		},
		{
			name: "UniqueClause",
			pos:  position{line: 370, col: 1, offset: 9453},
			expr: &actionExpr{
				pos: position{line: 371, col: 4, offset: 9469},
				run: (*parser).callonUniqueClause1,
				expr: &ruleRefExpr{
					pos:  position{line: 371, col: 4, offset: 9469},
					name: "UniqueToken",
				},
			},
		},
		{
			name: "DefaultClause",
			pos:  position{line: 379, col: 1, offset: 9614},
			expr: &actionExpr{
				pos: position{line: 380, col: 4, offset: 9631},
				run: (*parser).callonDefaultClause1,
				expr: &seqExpr{
					pos: position{line: 380, col: 4, offset: 9631},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 380, col: 4, offset: 9631},
							name: "DefaultToken",
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 17, offset: 9644},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 19, offset: 9646},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 21, offset: 9648},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "ForeignClause",
			pos:  position{line: 389, col: 1, offset: 9818},
			expr: &actionExpr{
				pos: position{line: 390, col: 4, offset: 9835},
				run: (*parser).callonForeignClause1,
				expr: &seqExpr{
					pos: position{line: 390, col: 4, offset: 9835},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 390, col: 4, offset: 9835},
							name: "ReferencesToken",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 20, offset: 9851},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 22, offset: 9853},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 24, offset: 9855},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 35, offset: 9866},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 390, col: 37, offset: 9868},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 41, offset: 9872},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 390, col: 43, offset: 9874},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 45, offset: 9876},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 56, offset: 9887},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 390, col: 58, offset: 9889},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AutoincrementClause",
			pos:  position{line: 400, col: 1, offset: 10104},
			expr: &actionExpr{
				pos: position{line: 401, col: 4, offset: 10127},
				run: (*parser).callonAutoincrementClause1,
				expr: &ruleRefExpr{
					pos:  position{line: 401, col: 4, offset: 10127},
					name: "AutoincrementToken",
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 410, col: 1, offset: 10304},
			expr: &ruleRefExpr{
				pos:  position{line: 411, col: 4, offset: 10312},
				name: "LogicExpr",
			},
		},
		{
			name: "ExprWithDefault",
			pos:  position{line: 413, col: 1, offset: 10323},
			expr: &choiceExpr{
				pos: position{line: 414, col: 4, offset: 10342},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 414, col: 4, offset: 10342},
						run: (*parser).callonExprWithDefault2,
						expr: &seqExpr{
							pos: position{line: 414, col: 4, offset: 10342},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 414, col: 4, offset: 10342},
									expr: &ruleRefExpr{
										pos:  position{line: 414, col: 6, offset: 10344},
										name: "DefaultLiteral",
									},
								},
								&labeledExpr{
									pos:   position{line: 414, col: 22, offset: 10360},
									label: "d",
									expr: &ruleRefExpr{
										pos:  position{line: 414, col: 24, offset: 10362},
										name: "DefaultLiteral",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 415, col: 4, offset: 10398},
						name: "Expr",
					},
				},
			},
		},
		{
			name: "LogicExpr",
			pos:  position{line: 417, col: 1, offset: 10404},
			expr: &ruleRefExpr{
				pos:  position{line: 418, col: 4, offset: 10417},
				name: "LogicExpr4",
			},
		},
		{
			name: "LogicExpr4",
			pos:  position{line: 420, col: 1, offset: 10429},
			expr: &actionExpr{
				pos: position{line: 421, col: 4, offset: 10443},
				run: (*parser).callonLogicExpr41,
				expr: &seqExpr{
					pos: position{line: 421, col: 4, offset: 10443},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 421, col: 4, offset: 10443},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 6, offset: 10445},
								name: "LogicExpr3",
							},
						},
						&labeledExpr{
							pos:   position{line: 422, col: 3, offset: 10458},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 422, col: 6, offset: 10461},
								expr: &actionExpr{
									pos: position{line: 422, col: 8, offset: 10463},
									run: (*parser).callonLogicExpr47,
									expr: &seqExpr{
										pos: position{line: 422, col: 8, offset: 10463},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 422, col: 8, offset: 10463},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 422, col: 10, offset: 10465},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 422, col: 13, offset: 10468},
													name: "OrOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 422, col: 24, offset: 10479},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 422, col: 26, offset: 10481},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 422, col: 28, offset: 10483},
													name: "LogicExpr3",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr3",
			pos:  position{line: 426, col: 1, offset: 10646},
			expr: &actionExpr{
				pos: position{line: 427, col: 4, offset: 10660},
				run: (*parser).callonLogicExpr31,
				expr: &seqExpr{
					pos: position{line: 427, col: 4, offset: 10660},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 4, offset: 10660},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 6, offset: 10662},
								name: "LogicExpr2",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 3, offset: 10675},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 6, offset: 10678},
								expr: &actionExpr{
									pos: position{line: 428, col: 8, offset: 10680},
									run: (*parser).callonLogicExpr37,
									expr: &seqExpr{
										pos: position{line: 428, col: 8, offset: 10680},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 428, col: 8, offset: 10680},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 428, col: 10, offset: 10682},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 13, offset: 10685},
													name: "AndOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 428, col: 25, offset: 10697},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 428, col: 27, offset: 10699},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 29, offset: 10701},
													name: "LogicExpr2",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr2",
			pos:  position{line: 432, col: 1, offset: 10864},
			expr: &choiceExpr{
				pos: position{line: 433, col: 4, offset: 10878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 433, col: 4, offset: 10878},
						run: (*parser).callonLogicExpr22,
						expr: &seqExpr{
							pos: position{line: 433, col: 4, offset: 10878},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 433, col: 4, offset: 10878},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 7, offset: 10881},
										name: "NotOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 433, col: 19, offset: 10893},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 433, col: 21, offset: 10895},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 433, col: 23, offset: 10897},
										name: "LogicExpr2",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 435, col: 4, offset: 10982},
						name: "LogicExpr1",
					},
				},
			},
		},
		{
			name: "LogicExpr1",
			pos:  position{line: 437, col: 1, offset: 10994},
			expr: &actionExpr{
				pos: position{line: 438, col: 4, offset: 11008},
				run: (*parser).callonLogicExpr11,
				expr: &seqExpr{
					pos: position{line: 438, col: 4, offset: 11008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 438, col: 4, offset: 11008},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 6, offset: 11010},
								name: "ArithmeticExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 21, offset: 11025},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 438, col: 24, offset: 11028},
								expr: &actionExpr{
									pos: position{line: 438, col: 26, offset: 11030},
									run: (*parser).callonLogicExpr17,
									expr: &seqExpr{
										pos: position{line: 438, col: 26, offset: 11030},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 438, col: 26, offset: 11030},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 438, col: 28, offset: 11032},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 438, col: 30, offset: 11034},
													name: "LogicExpr1Op",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Op",
			pos:  position{line: 441, col: 1, offset: 11143},
			expr: &choiceExpr{
				pos: position{line: 442, col: 4, offset: 11159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 442, col: 4, offset: 11159},
						name: "LogicExpr1In",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 4, offset: 11175},
						name: "LogicExpr1Is",
					},
					&ruleRefExpr{
						pos:  position{line: 444, col: 4, offset: 11191},
						name: "LogicExpr1Like",
					},
					&ruleRefExpr{
						pos:  position{line: 445, col: 4, offset: 11209},
						name: "LogicExpr1Cmp",
					},
				},
			},
		},
		{
			name: "LogicExpr1In",
			pos:  position{line: 447, col: 1, offset: 11224},
			expr: &actionExpr{
				pos: position{line: 448, col: 4, offset: 11240},
				run: (*parser).callonLogicExpr1In1,
				expr: &seqExpr{
					pos: position{line: 448, col: 4, offset: 11240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 448, col: 4, offset: 11240},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 448, col: 6, offset: 11242},
								expr: &actionExpr{
									pos: position{line: 448, col: 8, offset: 11244},
									run: (*parser).callonLogicExpr1In5,
									expr: &seqExpr{
										pos: position{line: 448, col: 8, offset: 11244},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 448, col: 8, offset: 11244},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 448, col: 10, offset: 11246},
													name: "NotOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 448, col: 22, offset: 11258},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 45, offset: 11281},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 53, offset: 11289},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 448, col: 55, offset: 11291},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 59, offset: 11295},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 448, col: 61, offset: 11297},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 63, offset: 11299},
								name: "MultiExpr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 448, col: 73, offset: 11309},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 448, col: 75, offset: 11311},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Is",
			pos:  position{line: 460, col: 1, offset: 11552},
			expr: &actionExpr{
				pos: position{line: 461, col: 4, offset: 11568},
				run: (*parser).callonLogicExpr1Is1,
				expr: &seqExpr{
					pos: position{line: 461, col: 4, offset: 11568},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 461, col: 4, offset: 11568},
							name: "IsToken",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 12, offset: 11576},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 461, col: 14, offset: 11578},
								expr: &actionExpr{
									pos: position{line: 461, col: 16, offset: 11580},
									run: (*parser).callonLogicExpr1Is6,
									expr: &seqExpr{
										pos: position{line: 461, col: 16, offset: 11580},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 461, col: 16, offset: 11580},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 461, col: 18, offset: 11582},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 461, col: 20, offset: 11584},
													name: "NotOperator",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 461, col: 53, offset: 11617},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 461, col: 55, offset: 11619},
							label: "u",
							expr: &ruleRefExpr{
								pos:  position{line: 461, col: 57, offset: 11621},
								name: "NullLiteral",
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Like",
			pos:  position{line: 473, col: 1, offset: 11881},
			expr: &actionExpr{
				pos: position{line: 474, col: 4, offset: 11899},
				run: (*parser).callonLogicExpr1Like1,
				expr: &seqExpr{
					pos: position{line: 474, col: 4, offset: 11899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 474, col: 4, offset: 11899},
							label: "n",
							expr: &zeroOrOneExpr{
								pos: position{line: 474, col: 6, offset: 11901},
								expr: &actionExpr{
									pos: position{line: 474, col: 8, offset: 11903},
									run: (*parser).callonLogicExpr1Like5,
									expr: &seqExpr{
										pos: position{line: 474, col: 8, offset: 11903},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 474, col: 8, offset: 11903},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 474, col: 10, offset: 11905},
													name: "NotOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 474, col: 22, offset: 11917},
												name: "_",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 45, offset: 11940},
							name: "LikeToken",
						},
						&ruleRefExpr{
							pos:  position{line: 474, col: 55, offset: 11950},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 474, col: 57, offset: 11952},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 59, offset: 11954},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 475, col: 2, offset: 11960},
							label: "escape",
							expr: &zeroOrOneExpr{
								pos: position{line: 475, col: 9, offset: 11967},
								expr: &actionExpr{
									pos: position{line: 475, col: 11, offset: 11969},
									run: (*parser).callonLogicExpr1Like16,
									expr: &seqExpr{
										pos: position{line: 475, col: 11, offset: 11969},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 475, col: 11, offset: 11969},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 475, col: 13, offset: 11971},
												name: "EscapeToken",
											},
											&ruleRefExpr{
												pos:  position{line: 475, col: 25, offset: 11983},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 475, col: 27, offset: 11985},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 475, col: 29, offset: 11987},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicExpr1Cmp",
			pos:  position{line: 490, col: 1, offset: 12318},
			expr: &actionExpr{
				pos: position{line: 491, col: 4, offset: 12335},
				run: (*parser).callonLogicExpr1Cmp1,
				expr: &seqExpr{
					pos: position{line: 491, col: 4, offset: 12335},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 491, col: 4, offset: 12335},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 7, offset: 12338},
								name: "CmpOperator",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 491, col: 19, offset: 12350},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 21, offset: 12352},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 23, offset: 12354},
								name: "ArithmeticExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr",
			pos:  position{line: 494, col: 1, offset: 12442},
			expr: &ruleRefExpr{
				pos:  position{line: 495, col: 4, offset: 12460},
				name: "ArithmeticExpr3",
			},
		},
		{
			name: "ArithmeticExpr3",
			pos:  position{line: 497, col: 1, offset: 12477},
			expr: &actionExpr{
				pos: position{line: 498, col: 4, offset: 12496},
				run: (*parser).callonArithmeticExpr31,
				expr: &seqExpr{
					pos: position{line: 498, col: 4, offset: 12496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 4, offset: 12496},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 6, offset: 12498},
								name: "ArithmeticExpr2",
							},
						},
						&labeledExpr{
							pos:   position{line: 499, col: 3, offset: 12516},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 499, col: 6, offset: 12519},
								expr: &actionExpr{
									pos: position{line: 499, col: 8, offset: 12521},
									run: (*parser).callonArithmeticExpr37,
									expr: &seqExpr{
										pos: position{line: 499, col: 8, offset: 12521},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 499, col: 8, offset: 12521},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 499, col: 10, offset: 12523},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 499, col: 13, offset: 12526},
													name: "ConcatOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 499, col: 28, offset: 12541},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 499, col: 30, offset: 12543},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 499, col: 32, offset: 12545},
													name: "ArithmeticExpr2",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr2",
			pos:  position{line: 503, col: 1, offset: 12713},
			expr: &actionExpr{
				pos: position{line: 504, col: 4, offset: 12732},
				run: (*parser).callonArithmeticExpr21,
				expr: &seqExpr{
					pos: position{line: 504, col: 4, offset: 12732},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 504, col: 4, offset: 12732},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 6, offset: 12734},
								name: "ArithmeticExpr1",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 3, offset: 12752},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 505, col: 6, offset: 12755},
								expr: &actionExpr{
									pos: position{line: 505, col: 8, offset: 12757},
									run: (*parser).callonArithmeticExpr27,
									expr: &seqExpr{
										pos: position{line: 505, col: 8, offset: 12757},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 505, col: 8, offset: 12757},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 505, col: 10, offset: 12759},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 505, col: 13, offset: 12762},
													name: "AddSubOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 505, col: 28, offset: 12777},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 505, col: 30, offset: 12779},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 505, col: 32, offset: 12781},
													name: "ArithmeticExpr1",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArithmeticExpr1",
			pos:  position{line: 509, col: 1, offset: 12949},
			expr: &actionExpr{
				pos: position{line: 510, col: 4, offset: 12968},
				run: (*parser).callonArithmeticExpr11,
				expr: &seqExpr{
					pos: position{line: 510, col: 4, offset: 12968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 4, offset: 12968},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 6, offset: 12970},
								name: "Operand",
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 3, offset: 12980},
							label: "os",
							expr: &zeroOrMoreExpr{
								pos: position{line: 511, col: 6, offset: 12983},
								expr: &actionExpr{
									pos: position{line: 511, col: 8, offset: 12985},
									run: (*parser).callonArithmeticExpr17,
									expr: &seqExpr{
										pos: position{line: 511, col: 8, offset: 12985},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 511, col: 8, offset: 12985},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 511, col: 10, offset: 12987},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 511, col: 13, offset: 12990},
													name: "MulDivModOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 511, col: 31, offset: 13008},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 511, col: 33, offset: 13010},
												label: "s",
												expr: &ruleRefExpr{
													pos:  position{line: 511, col: 35, offset: 13012},
													name: "Operand",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiExpr",
			pos:  position{line: 515, col: 1, offset: 13172},
			expr: &actionExpr{
				pos: position{line: 516, col: 4, offset: 13185},
				run: (*parser).callonMultiExpr1,
				expr: &seqExpr{
					pos: position{line: 516, col: 4, offset: 13185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 516, col: 4, offset: 13185},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 6, offset: 13187},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 11, offset: 13192},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 516, col: 14, offset: 13195},
								expr: &actionExpr{
									pos: position{line: 516, col: 16, offset: 13197},
									run: (*parser).callonMultiExpr7,
									expr: &seqExpr{
										pos: position{line: 516, col: 16, offset: 13197},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 516, col: 16, offset: 13197},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 516, col: 18, offset: 13199},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 516, col: 33, offset: 13214},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 516, col: 35, offset: 13216},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 516, col: 37, offset: 13218},
													name: "Expr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiExprWithDefault",
			pos:  position{line: 519, col: 1, offset: 13306},
			expr: &actionExpr{
				pos: position{line: 520, col: 4, offset: 13330},
				run: (*parser).callonMultiExprWithDefault1,
				expr: &seqExpr{
					pos: position{line: 520, col: 4, offset: 13330},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 520, col: 4, offset: 13330},
							label: "x",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 6, offset: 13332},
								name: "ExprWithDefault",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 22, offset: 13348},
							label: "xs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 520, col: 25, offset: 13351},
								expr: &actionExpr{
									pos: position{line: 520, col: 27, offset: 13353},
									run: (*parser).callonMultiExprWithDefault7,
									expr: &seqExpr{
										pos: position{line: 520, col: 27, offset: 13353},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 520, col: 27, offset: 13353},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 520, col: 29, offset: 13355},
												name: "SeparatorToken",
											},
											&ruleRefExpr{
												pos:  position{line: 520, col: 44, offset: 13370},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 520, col: 46, offset: 13372},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 520, col: 48, offset: 13374},
													name: "ExprWithDefault",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operand",
			pos:  position{line: 531, col: 1, offset: 13612},
			expr: &choiceExpr{
				pos: position{line: 532, col: 4, offset: 13623},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 532, col: 4, offset: 13623},
						run: (*parser).callonOperand2,
						expr: &seqExpr{
							pos: position{line: 532, col: 4, offset: 13623},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 532, col: 4, offset: 13623},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 7, offset: 13626},
										name: "UnaryOperator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 532, col: 21, offset: 13640},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 532, col: 23, offset: 13642},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 25, offset: 13644},
										name: "Operand",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 534, col: 4, offset: 13727},
						run: (*parser).callonOperand9,
						expr: &seqExpr{
							pos: position{line: 534, col: 4, offset: 13727},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 534, col: 4, offset: 13727},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 8, offset: 13731},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 534, col: 10, offset: 13733},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 534, col: 12, offset: 13735},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 534, col: 17, offset: 13740},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 534, col: 19, offset: 13742},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 542, col: 4, offset: 13933},
						run: (*parser).callonOperand17,
						expr: &seqExpr{
							pos: position{line: 542, col: 4, offset: 13933},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 542, col: 4, offset: 13933},
									expr: &ruleRefExpr{
										pos:  position{line: 542, col: 6, offset: 13935},
										name: "CastToken",
									},
								},
								&labeledExpr{
									pos:   position{line: 542, col: 17, offset: 13946},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 542, col: 19, offset: 13948},
										name: "TypeCast",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 543, col: 4, offset: 13978},
						name: "FunctionCall",
					},
					&ruleRefExpr{
						pos:  position{line: 544, col: 4, offset: 13994},
						name: "Value",
					},
					&ruleRefExpr{
						pos:  position{line: 545, col: 4, offset: 14003},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "TypeCast",
			pos:  position{line: 547, col: 1, offset: 14015},
			expr: &actionExpr{
				pos: position{line: 548, col: 4, offset: 14027},
				run: (*parser).callonTypeCast1,
				expr: &seqExpr{
					pos: position{line: 548, col: 4, offset: 14027},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 548, col: 4, offset: 14027},
							name: "CastToken",
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 14, offset: 14037},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 548, col: 16, offset: 14039},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 20, offset: 14043},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 22, offset: 14045},
							label: "o",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 24, offset: 14047},
								name: "Expr",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 29, offset: 14052},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 31, offset: 14054},
							name: "AsToken",
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 39, offset: 14062},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 41, offset: 14064},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 43, offset: 14066},
								name: "DataType",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 52, offset: 14075},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 548, col: 54, offset: 14077},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionCall",
			pos:  position{line: 558, col: 1, offset: 14286},
			expr: &actionExpr{
				pos: position{line: 559, col: 4, offset: 14302},
				run: (*parser).callonFunctionCall1,
				expr: &seqExpr{
					pos: position{line: 559, col: 4, offset: 14302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 559, col: 4, offset: 14302},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 6, offset: 14304},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 17, offset: 14315},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 559, col: 19, offset: 14317},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 23, offset: 14321},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 25, offset: 14323},
							label: "r",
							expr: &zeroOrOneExpr{
								pos: position{line: 559, col: 27, offset: 14325},
								expr: &ruleRefExpr{
									pos:  position{line: 559, col: 27, offset: 14325},
									name: "FunctionArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 41, offset: 14339},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 559, col: 43, offset: 14341},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FunctionArgs",
			pos:  position{line: 581, col: 1, offset: 14841},
			expr: &choiceExpr{
				pos: position{line: 582, col: 4, offset: 14857},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 582, col: 4, offset: 14857},
						name: "AnyLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 583, col: 4, offset: 14871},
						name: "MultiExpr",
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 585, col: 1, offset: 14882},
			expr: &actionExpr{
				pos: position{line: 586, col: 4, offset: 14896},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 586, col: 4, offset: 14896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 586, col: 4, offset: 14896},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 6, offset: 14898},
								name: "Identifier",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 17, offset: 14909},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 586, col: 19, offset: 14911},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 586, col: 23, offset: 14915},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 586, col: 25, offset: 14917},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 27, offset: 14919},
								name: "ExprWithDefault",
							},
						},
					},
				},
			},
		},
		{
			name: "UnaryOperator",
			pos:  position{line: 597, col: 1, offset: 15166},
			expr: &ruleRefExpr{
				pos:  position{line: 598, col: 4, offset: 15183},
				name: "SignOperator",
			},
		},
		{
			name: "SignOperator",
			pos:  position{line: 600, col: 1, offset: 15197},
			expr: &actionExpr{
				pos: position{line: 601, col: 4, offset: 15213},
				run: (*parser).callonSignOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 601, col: 4, offset: 15213},
					name: "Sign",
				},
			},
		},
		{
			name: "NotOperator",
			pos:  position{line: 617, col: 1, offset: 15518},
			expr: &actionExpr{
				pos: position{line: 618, col: 4, offset: 15533},
				run: (*parser).callonNotOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 618, col: 4, offset: 15533},
					name: "NotToken",
				},
			},
		},
		{
			name: "AndOperator",
			pos:  position{line: 626, col: 1, offset: 15674},
			expr: &actionExpr{
				pos: position{line: 627, col: 4, offset: 15689},
				run: (*parser).callonAndOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 627, col: 4, offset: 15689},
					name: "AndToken",
				},
			},
		},
		{
			name: "OrOperator",
			pos:  position{line: 635, col: 1, offset: 15830},
			expr: &actionExpr{
				pos: position{line: 636, col: 4, offset: 15844},
				run: (*parser).callonOrOperator1,
				expr: &ruleRefExpr{
					pos:  position{line: 636, col: 4, offset: 15844},
					name: "OrToken",
				},
			},
		},
		{
			name: "CmpOperator",
			pos:  position{line: 644, col: 1, offset: 15983},
			expr: &actionExpr{
				pos: position{line: 645, col: 4, offset: 15998},
				run: (*parser).callonCmpOperator1,
				expr: &choiceExpr{
					pos: position{line: 645, col: 6, offset: 16000},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 645, col: 6, offset: 16000},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 645, col: 13, offset: 16007},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 645, col: 20, offset: 16014},
							val:        "<>",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 645, col: 27, offset: 16021},
							val:        "!=",
							ignoreCase: false,
						},
						&charClassMatcher{
							pos:        position{line: 645, col: 34, offset: 16028},
							val:        "[<>=]",
							chars:      []rune{'<', '>', '='},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "ConcatOperator",
			pos:  position{line: 671, col: 1, offset: 16607},
			expr: &actionExpr{
				pos: position{line: 672, col: 4, offset: 16625},
				run: (*parser).callonConcatOperator1,
				expr: &litMatcher{
					pos:        position{line: 672, col: 4, offset: 16625},
					val:        "||",
					ignoreCase: false,
				},
			},
		},
		{
			name: "AddSubOperator",
			pos:  position{line: 680, col: 1, offset: 16765},
			expr: &actionExpr{
				pos: position{line: 681, col: 4, offset: 16783},
				run: (*parser).callonAddSubOperator1,
				expr: &charClassMatcher{
					pos:        position{line: 681, col: 4, offset: 16783},
					val:        "[+-]",
					chars:      []rune{'+', '-'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "MulDivModOperator",
			pos:  position{line: 697, col: 1, offset: 17117},
			expr: &actionExpr{
				pos: position{line: 698, col: 4, offset: 17138},
				run: (*parser).callonMulDivModOperator1,
				expr: &charClassMatcher{
					pos:        position{line: 698, col: 4, offset: 17138},
					val:        "[*/%]",
					chars:      []rune{'*', '/', '%'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "DataType",
			pos:  position{line: 717, col: 1, offset: 17538},
			expr: &choiceExpr{
				pos: position{line: 718, col: 4, offset: 17550},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 718, col: 4, offset: 17550},
						name: "UIntType",
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 4, offset: 17562},
						name: "IntType",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 4, offset: 17573},
						name: "UFixedType",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 4, offset: 17587},
						name: "FixedType",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 4, offset: 17600},
						name: "FixedBytesType",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 4, offset: 17618},
						name: "DynamicBytesType",
					},
					&ruleRefExpr{
						pos:  position{line: 724, col: 4, offset: 17638},
						name: "BoolType",
					},
					&ruleRefExpr{
						pos:  position{line: 725, col: 4, offset: 17650},
						name: "AddressType",
					},
				},
			},
		},
		{
			name: "UIntType",
			pos:  position{line: 727, col: 1, offset: 17663},
			expr: &actionExpr{
				pos: position{line: 728, col: 4, offset: 17675},
				run: (*parser).callonUIntType1,
				expr: &seqExpr{
					pos: position{line: 728, col: 4, offset: 17675},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 728, col: 4, offset: 17675},
							val:        "uint",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 728, col: 12, offset: 17683},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 14, offset: 17685},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 728, col: 36, offset: 17707},
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 37, offset: 17708},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IntType",
			pos:  position{line: 751, col: 1, offset: 18261},
			expr: &actionExpr{
				pos: position{line: 752, col: 4, offset: 18272},
				run: (*parser).callonIntType1,
				expr: &seqExpr{
					pos: position{line: 752, col: 4, offset: 18272},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 752, col: 4, offset: 18272},
							val:        "int",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 752, col: 11, offset: 18279},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 13, offset: 18281},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 35, offset: 18303},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 36, offset: 18304},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "UFixedType",
			pos:  position{line: 775, col: 1, offset: 18857},
			expr: &actionExpr{
				pos: position{line: 776, col: 4, offset: 18871},
				run: (*parser).callonUFixedType1,
				expr: &seqExpr{
					pos: position{line: 776, col: 4, offset: 18871},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 776, col: 4, offset: 18871},
							val:        "ufixed",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 776, col: 14, offset: 18881},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 16, offset: 18883},
								name: "NonZeroLeadingInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 776, col: 38, offset: 18905},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 776, col: 43, offset: 18910},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 45, offset: 18912},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 776, col: 67, offset: 18934},
							expr: &ruleRefExpr{
								pos:  position{line: 776, col: 68, offset: 18935},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FixedType",
			pos:  position{line: 813, col: 1, offset: 19912},
			expr: &actionExpr{
				pos: position{line: 814, col: 4, offset: 19925},
				run: (*parser).callonFixedType1,
				expr: &seqExpr{
					pos: position{line: 814, col: 4, offset: 19925},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 814, col: 4, offset: 19925},
							val:        "fixed",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 814, col: 13, offset: 19934},
							label: "s",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 15, offset: 19936},
								name: "NonZeroLeadingInteger",
							},
						},
						&litMatcher{
							pos:        position{line: 814, col: 37, offset: 19958},
							val:        "x",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 814, col: 42, offset: 19963},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 44, offset: 19965},
								name: "NonZeroLeadingInteger",
							},
						},
						&notExpr{
							pos: position{line: 814, col: 66, offset: 19987},
							expr: &ruleRefExpr{
								pos:  position{line: 814, col: 67, offset: 19988},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FixedBytesType",
			pos:  position{line: 851, col: 1, offset: 20964},
			expr: &choiceExpr{
				pos: position{line: 852, col: 4, offset: 20982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 852, col: 4, offset: 20982},
						run: (*parser).callonFixedBytesType2,
						expr: &seqExpr{
							pos: position{line: 852, col: 4, offset: 20982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 852, col: 4, offset: 20982},
									val:        "bytes",
									ignoreCase: true,
								},
								&labeledExpr{
									pos:   position{line: 852, col: 13, offset: 20991},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 15, offset: 20993},
										name: "NonZeroLeadingInteger",
									},
								},
								&notExpr{
									pos: position{line: 852, col: 37, offset: 21015},
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 38, offset: 21016},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 873, col: 4, offset: 21562},
						run: (*parser).callonFixedBytesType9,
						expr: &seqExpr{
							pos: position{line: 873, col: 4, offset: 21562},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 873, col: 4, offset: 21562},
									val:        "byte",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 873, col: 12, offset: 21570},
									expr: &ruleRefExpr{
										pos:  position{line: 873, col: 13, offset: 21571},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DynamicBytesType",
			pos:  position{line: 882, col: 1, offset: 21742},
			expr: &actionExpr{
				pos: position{line: 883, col: 4, offset: 21762},
				run: (*parser).callonDynamicBytesType1,
				expr: &seqExpr{
					pos: position{line: 883, col: 4, offset: 21762},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 883, col: 4, offset: 21762},
							val:        "bytes",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 883, col: 13, offset: 21771},
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 14, offset: 21772},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressType",
			pos:  position{line: 891, col: 1, offset: 21930},
			expr: &actionExpr{
				pos: position{line: 892, col: 4, offset: 21945},
				run: (*parser).callonAddressType1,
				expr: &seqExpr{
					pos: position{line: 892, col: 4, offset: 21945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 892, col: 4, offset: 21945},
							val:        "address",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 892, col: 15, offset: 21956},
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 16, offset: 21957},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "BoolType",
			pos:  position{line: 900, col: 1, offset: 22110},
			expr: &actionExpr{
				pos: position{line: 901, col: 4, offset: 22122},
				run: (*parser).callonBoolType1,
				expr: &choiceExpr{
					pos: position{line: 901, col: 6, offset: 22124},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 901, col: 6, offset: 22124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 901, col: 6, offset: 22124},
									val:        "bool",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 901, col: 14, offset: 22132},
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 15, offset: 22133},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 902, col: 5, offset: 22158},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 902, col: 5, offset: 22158},
									val:        "boolean",
									ignoreCase: true,
								},
								&notExpr{
									pos: position{line: 902, col: 16, offset: 22169},
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 17, offset: 22170},
										name: "NormalIdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Value",
			pos:  position{line: 912, col: 1, offset: 22336},
			expr: &choiceExpr{
				pos: position{line: 913, col: 4, offset: 22345},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 913, col: 4, offset: 22345},
						name: "NumberLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 914, col: 4, offset: 22362},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 4, offset: 22379},
						name: "BoolLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 916, col: 4, offset: 22394},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "AnyLiteral",
			pos:  position{line: 918, col: 1, offset: 22407},
			expr: &actionExpr{
				pos: position{line: 919, col: 4, offset: 22421},
				run: (*parser).callonAnyLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 919, col: 4, offset: 22421},
					name: "AnyToken",
				},
			},
		},
		{
			name: "DefaultLiteral",
			pos:  position{line: 927, col: 1, offset: 22560},
			expr: &actionExpr{
				pos: position{line: 928, col: 4, offset: 22578},
				run: (*parser).callonDefaultLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 928, col: 4, offset: 22578},
					name: "DefaultToken",
				},
			},
		},
		{
			name: "BoolLiteral",
			pos:  position{line: 936, col: 1, offset: 22725},
			expr: &actionExpr{
				pos: position{line: 937, col: 4, offset: 22740},
				run: (*parser).callonBoolLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 937, col: 4, offset: 22740},
					label: "b",
					expr: &choiceExpr{
						pos: position{line: 937, col: 8, offset: 22744},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 937, col: 8, offset: 22744},
								name: "TrueToken",
							},
							&ruleRefExpr{
								pos:  position{line: 937, col: 20, offset: 22756},
								name: "FalseToken",
							},
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 950, col: 1, offset: 23021},
			expr: &actionExpr{
				pos: position{line: 951, col: 4, offset: 23036},
				run: (*parser).callonNullLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 951, col: 4, offset: 23036},
					name: "NullToken",
				},
			},
		},
		{
			name: "NumberLiteral",
			pos:  position{line: 959, col: 1, offset: 23176},
			expr: &choiceExpr{
				pos: position{line: 960, col: 4, offset: 23193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 960, col: 4, offset: 23193},
						run: (*parser).callonNumberLiteral2,
						expr: &seqExpr{
							pos: position{line: 960, col: 4, offset: 23193},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 960, col: 4, offset: 23193},
									expr: &seqExpr{
										pos: position{line: 960, col: 6, offset: 23195},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 960, col: 6, offset: 23195},
												val:        "0",
												ignoreCase: false,
											},
											&litMatcher{
												pos:        position{line: 960, col: 10, offset: 23199},
												val:        "x",
												ignoreCase: true,
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 960, col: 16, offset: 23205},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 960, col: 18, offset: 23207},
										name: "Hex",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 4, offset: 23232},
						name: "Decimal",
					},
				},
			},
		},
		{
			name: "Sign",
			pos:  position{line: 963, col: 1, offset: 23241},
			expr: &charClassMatcher{
				pos:        position{line: 964, col: 4, offset: 23249},
				val:        "[-+]",
				chars:      []rune{'-', '+'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Integer",
			pos:  position{line: 966, col: 1, offset: 23255},
			expr: &oneOrMoreExpr{
				pos: position{line: 967, col: 4, offset: 23266},
				expr: &charClassMatcher{
					pos:        position{line: 967, col: 4, offset: 23266},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 969, col: 1, offset: 23274},
			expr: &actionExpr{
				pos: position{line: 970, col: 4, offset: 23292},
				run: (*parser).callonIntegerLiteral1,
				expr: &ruleRefExpr{
					pos:  position{line: 970, col: 4, offset: 23292},
					name: "Integer",
				},
			},
		},
		{
			name: "NonZeroLeadingInteger",
			pos:  position{line: 993, col: 1, offset: 23841},
			expr: &actionExpr{
				pos: position{line: 994, col: 4, offset: 23866},
				run: (*parser).callonNonZeroLeadingInteger1,
				expr: &choiceExpr{
					pos: position{line: 994, col: 6, offset: 23868},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 994, col: 6, offset: 23868},
							val:        "0",
							ignoreCase: false,
						},
						&seqExpr{
							pos: position{line: 994, col: 12, offset: 23874},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 994, col: 12, offset: 23874},
									val:        "[1-9]",
									ranges:     []rune{'1', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 994, col: 17, offset: 23879},
									expr: &charClassMatcher{
										pos:        position{line: 994, col: 17, offset: 23879},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Fixnum",
			pos:  position{line: 997, col: 1, offset: 23912},
			expr: &actionExpr{
				pos: position{line: 998, col: 4, offset: 23922},
				run: (*parser).callonFixnum1,
				expr: &choiceExpr{
					pos: position{line: 998, col: 6, offset: 23924},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 998, col: 6, offset: 23924},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 998, col: 6, offset: 23924},
									name: "Integer",
								},
								&litMatcher{
									pos:        position{line: 998, col: 14, offset: 23932},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 998, col: 18, offset: 23936},
									name: "Integer",
								},
							},
						},
						&seqExpr{
							pos: position{line: 999, col: 5, offset: 23948},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 999, col: 5, offset: 23948},
									name: "Integer",
								},
								&litMatcher{
									pos:        position{line: 999, col: 13, offset: 23956},
									val:        ".",
									ignoreCase: false,
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1000, col: 5, offset: 23964},
							name: "Integer",
						},
						&seqExpr{
							pos: position{line: 1001, col: 5, offset: 23976},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1001, col: 5, offset: 23976},
									val:        ".",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1001, col: 9, offset: 23980},
									name: "Integer",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Decimal",
			pos:  position{line: 1005, col: 1, offset: 24015},
			expr: &actionExpr{
				pos: position{line: 1006, col: 4, offset: 24026},
				run: (*parser).callonDecimal1,
				expr: &seqExpr{
					pos: position{line: 1006, col: 4, offset: 24026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1006, col: 4, offset: 24026},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1006, col: 6, offset: 24028},
								name: "Fixnum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1006, col: 13, offset: 24035},
							label: "e",
							expr: &zeroOrOneExpr{
								pos: position{line: 1006, col: 15, offset: 24037},
								expr: &seqExpr{
									pos: position{line: 1006, col: 17, offset: 24039},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1006, col: 17, offset: 24039},
											val:        "e",
											ignoreCase: true,
										},
										&zeroOrOneExpr{
											pos: position{line: 1006, col: 22, offset: 24044},
											expr: &ruleRefExpr{
												pos:  position{line: 1006, col: 22, offset: 24044},
												name: "Sign",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1006, col: 28, offset: 24050},
											name: "Integer",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1044, col: 1, offset: 24952},
			expr: &actionExpr{
				pos: position{line: 1045, col: 4, offset: 24959},
				run: (*parser).callonHex1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 4, offset: 24959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1045, col: 4, offset: 24959},
							val:        "0x",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 1045, col: 9, offset: 24964},
							expr: &charClassMatcher{
								pos:        position{line: 1045, col: 11, offset: 24966},
								val:        "[0-9A-Fa-f]",
								ranges:     []rune{'0', '9', 'A', 'F', 'a', 'f'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&notExpr{
							pos: position{line: 1045, col: 26, offset: 24981},
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 27, offset: 24982},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 1053, col: 1, offset: 25133},
			expr: &choiceExpr{
				pos: position{line: 1054, col: 4, offset: 25150},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1054, col: 4, offset: 25150},
						name: "HexString",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 4, offset: 25163},
						name: "NormalString",
					},
				},
			},
		},
		{
			name: "HexString",
			pos:  position{line: 1057, col: 1, offset: 25177},
			expr: &actionExpr{
				pos: position{line: 1058, col: 4, offset: 25190},
				run: (*parser).callonHexString1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 4, offset: 25190},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1058, col: 6, offset: 25192},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1058, col: 6, offset: 25192},
									val:        "hex",
									ignoreCase: true,
								},
								&litMatcher{
									pos:        position{line: 1058, col: 15, offset: 25201},
									val:        "x",
									ignoreCase: true,
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1058, col: 22, offset: 25208},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 26, offset: 25212},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1058, col: 28, offset: 25214},
								expr: &actionExpr{
									pos: position{line: 1058, col: 29, offset: 25215},
									run: (*parser).callonHexString9,
									expr: &seqExpr{
										pos: position{line: 1058, col: 29, offset: 25215},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1058, col: 29, offset: 25215},
												val:        "[0-9a-fA-F]",
												ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 1058, col: 40, offset: 25226},
												val:        "[0-9a-fA-F]",
												ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1058, col: 78, offset: 25264},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NormalString",
			pos:  position{line: 1067, col: 1, offset: 25447},
			expr: &actionExpr{
				pos: position{line: 1068, col: 4, offset: 25463},
				run: (*parser).callonNormalString1,
				expr: &seqExpr{
					pos: position{line: 1068, col: 4, offset: 25463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1068, col: 4, offset: 25463},
							val:        "'",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1068, col: 8, offset: 25467},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1068, col: 10, offset: 25469},
								expr: &actionExpr{
									pos: position{line: 1068, col: 12, offset: 25471},
									run: (*parser).callonNormalString6,
									expr: &choiceExpr{
										pos: position{line: 1068, col: 14, offset: 25473},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1068, col: 14, offset: 25473},
												val:        "[^'\\r\\n\\\\]",
												chars:      []rune{'\'', '\r', '\n', '\\'},
												ignoreCase: false,
												inverted:   true,
											},
											&seqExpr{
												pos: position{line: 1068, col: 27, offset: 25486},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1068, col: 27, offset: 25486},
														val:        "\\",
														ignoreCase: false,
													},
													&anyMatcher{
														line: 1068, col: 32, offset: 25491,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1068, col: 62, offset: 25521},
							val:        "'",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectToken",
			pos:  position{line: 1094, col: 1, offset: 26130},
			expr: &actionExpr{
				pos: position{line: 1095, col: 4, offset: 26145},
				run: (*parser).callonSelectToken1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 4, offset: 26145},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1095, col: 4, offset: 26145},
							val:        "select",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1095, col: 14, offset: 26155},
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 15, offset: 26156},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FromToken",
			pos:  position{line: 1098, col: 1, offset: 26201},
			expr: &actionExpr{
				pos: position{line: 1099, col: 4, offset: 26214},
				run: (*parser).callonFromToken1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 4, offset: 26214},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 4, offset: 26214},
							val:        "from",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1099, col: 12, offset: 26222},
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 13, offset: 26223},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "WhereToken",
			pos:  position{line: 1102, col: 1, offset: 26268},
			expr: &actionExpr{
				pos: position{line: 1103, col: 4, offset: 26282},
				run: (*parser).callonWhereToken1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 4, offset: 26282},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1103, col: 4, offset: 26282},
							val:        "where",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1103, col: 13, offset: 26291},
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 14, offset: 26292},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderToken",
			pos:  position{line: 1106, col: 1, offset: 26337},
			expr: &actionExpr{
				pos: position{line: 1107, col: 4, offset: 26351},
				run: (*parser).callonOrderToken1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 4, offset: 26351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1107, col: 4, offset: 26351},
							val:        "order",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1107, col: 13, offset: 26360},
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 14, offset: 26361},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1110, col: 1, offset: 26406},
			expr: &actionExpr{
				pos: position{line: 1111, col: 4, offset: 26417},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 4, offset: 26417},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1111, col: 4, offset: 26417},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1111, col: 10, offset: 26423},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 11, offset: 26424},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupToken",
			pos:  position{line: 1114, col: 1, offset: 26469},
			expr: &actionExpr{
				pos: position{line: 1115, col: 4, offset: 26483},
				run: (*parser).callonGroupToken1,
				expr: &seqExpr{
					pos: position{line: 1115, col: 4, offset: 26483},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1115, col: 4, offset: 26483},
							val:        "group",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1115, col: 13, offset: 26492},
							expr: &ruleRefExpr{
								pos:  position{line: 1115, col: 14, offset: 26493},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitToken",
			pos:  position{line: 1118, col: 1, offset: 26538},
			expr: &actionExpr{
				pos: position{line: 1119, col: 4, offset: 26552},
				run: (*parser).callonLimitToken1,
				expr: &seqExpr{
					pos: position{line: 1119, col: 4, offset: 26552},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1119, col: 4, offset: 26552},
							val:        "limit",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1119, col: 13, offset: 26561},
							expr: &ruleRefExpr{
								pos:  position{line: 1119, col: 14, offset: 26562},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OffsetToken",
			pos:  position{line: 1122, col: 1, offset: 26607},
			expr: &actionExpr{
				pos: position{line: 1123, col: 4, offset: 26622},
				run: (*parser).callonOffsetToken1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 4, offset: 26622},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1123, col: 4, offset: 26622},
							val:        "offset",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1123, col: 14, offset: 26632},
							expr: &ruleRefExpr{
								pos:  position{line: 1123, col: 15, offset: 26633},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "UpdateToken",
			pos:  position{line: 1126, col: 1, offset: 26678},
			expr: &actionExpr{
				pos: position{line: 1127, col: 4, offset: 26693},
				run: (*parser).callonUpdateToken1,
				expr: &seqExpr{
					pos: position{line: 1127, col: 4, offset: 26693},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1127, col: 4, offset: 26693},
							val:        "update",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1127, col: 14, offset: 26703},
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 15, offset: 26704},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "SetToken",
			pos:  position{line: 1130, col: 1, offset: 26749},
			expr: &actionExpr{
				pos: position{line: 1131, col: 4, offset: 26761},
				run: (*parser).callonSetToken1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 4, offset: 26761},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 4, offset: 26761},
							val:        "set",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1131, col: 11, offset: 26768},
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 12, offset: 26769},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "DeleteToken",
			pos:  position{line: 1134, col: 1, offset: 26814},
			expr: &actionExpr{
				pos: position{line: 1135, col: 4, offset: 26829},
				run: (*parser).callonDeleteToken1,
				expr: &seqExpr{
					pos: position{line: 1135, col: 4, offset: 26829},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1135, col: 4, offset: 26829},
							val:        "delete",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1135, col: 14, offset: 26839},
							expr: &ruleRefExpr{
								pos:  position{line: 1135, col: 15, offset: 26840},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InsertToken",
			pos:  position{line: 1138, col: 1, offset: 26885},
			expr: &actionExpr{
				pos: position{line: 1139, col: 4, offset: 26900},
				run: (*parser).callonInsertToken1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 4, offset: 26900},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1139, col: 4, offset: 26900},
							val:        "insert",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1139, col: 14, offset: 26910},
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 15, offset: 26911},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IntoToken",
			pos:  position{line: 1142, col: 1, offset: 26956},
			expr: &actionExpr{
				pos: position{line: 1143, col: 4, offset: 26969},
				run: (*parser).callonIntoToken1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 4, offset: 26969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1143, col: 4, offset: 26969},
							val:        "into",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1143, col: 12, offset: 26977},
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 13, offset: 26978},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ValuesToken",
			pos:  position{line: 1146, col: 1, offset: 27023},
			expr: &actionExpr{
				pos: position{line: 1147, col: 4, offset: 27038},
				run: (*parser).callonValuesToken1,
				expr: &seqExpr{
					pos: position{line: 1147, col: 4, offset: 27038},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1147, col: 4, offset: 27038},
							val:        "values",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1147, col: 14, offset: 27048},
							expr: &ruleRefExpr{
								pos:  position{line: 1147, col: 15, offset: 27049},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "CreateToken",
			pos:  position{line: 1150, col: 1, offset: 27094},
			expr: &actionExpr{
				pos: position{line: 1151, col: 4, offset: 27109},
				run: (*parser).callonCreateToken1,
				expr: &seqExpr{
					pos: position{line: 1151, col: 4, offset: 27109},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1151, col: 4, offset: 27109},
							val:        "create",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1151, col: 14, offset: 27119},
							expr: &ruleRefExpr{
								pos:  position{line: 1151, col: 15, offset: 27120},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "TableToken",
			pos:  position{line: 1154, col: 1, offset: 27165},
			expr: &actionExpr{
				pos: position{line: 1155, col: 4, offset: 27179},
				run: (*parser).callonTableToken1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 4, offset: 27179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1155, col: 4, offset: 27179},
							val:        "table",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1155, col: 13, offset: 27188},
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 14, offset: 27189},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexToken",
			pos:  position{line: 1158, col: 1, offset: 27234},
			expr: &actionExpr{
				pos: position{line: 1159, col: 4, offset: 27248},
				run: (*parser).callonIndexToken1,
				expr: &seqExpr{
					pos: position{line: 1159, col: 4, offset: 27248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1159, col: 4, offset: 27248},
							val:        "index",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1159, col: 13, offset: 27257},
							expr: &ruleRefExpr{
								pos:  position{line: 1159, col: 14, offset: 27258},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqueToken",
			pos:  position{line: 1162, col: 1, offset: 27303},
			expr: &actionExpr{
				pos: position{line: 1163, col: 4, offset: 27318},
				run: (*parser).callonUniqueToken1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 4, offset: 27318},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1163, col: 4, offset: 27318},
							val:        "unique",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1163, col: 14, offset: 27328},
							expr: &ruleRefExpr{
								pos:  position{line: 1163, col: 15, offset: 27329},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "DefaultToken",
			pos:  position{line: 1166, col: 1, offset: 27374},
			expr: &actionExpr{
				pos: position{line: 1167, col: 4, offset: 27390},
				run: (*parser).callonDefaultToken1,
				expr: &seqExpr{
					pos: position{line: 1167, col: 4, offset: 27390},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1167, col: 4, offset: 27390},
							val:        "default",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1167, col: 15, offset: 27401},
							expr: &ruleRefExpr{
								pos:  position{line: 1167, col: 16, offset: 27402},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "PrimaryToken",
			pos:  position{line: 1170, col: 1, offset: 27447},
			expr: &actionExpr{
				pos: position{line: 1171, col: 4, offset: 27463},
				run: (*parser).callonPrimaryToken1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 4, offset: 27463},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1171, col: 4, offset: 27463},
							val:        "primary",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1171, col: 15, offset: 27474},
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 16, offset: 27475},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "KeyToken",
			pos:  position{line: 1174, col: 1, offset: 27520},
			expr: &actionExpr{
				pos: position{line: 1175, col: 4, offset: 27532},
				run: (*parser).callonKeyToken1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 4, offset: 27532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1175, col: 4, offset: 27532},
							val:        "key",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1175, col: 11, offset: 27539},
							expr: &ruleRefExpr{
								pos:  position{line: 1175, col: 12, offset: 27540},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ReferencesToken",
			pos:  position{line: 1178, col: 1, offset: 27585},
			expr: &actionExpr{
				pos: position{line: 1179, col: 4, offset: 27604},
				run: (*parser).callonReferencesToken1,
				expr: &seqExpr{
					pos: position{line: 1179, col: 4, offset: 27604},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1179, col: 4, offset: 27604},
							val:        "references",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1179, col: 18, offset: 27618},
							expr: &ruleRefExpr{
								pos:  position{line: 1179, col: 19, offset: 27619},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AutoincrementToken",
			pos:  position{line: 1182, col: 1, offset: 27664},
			expr: &actionExpr{
				pos: position{line: 1183, col: 4, offset: 27686},
				run: (*parser).callonAutoincrementToken1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 4, offset: 27686},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1183, col: 4, offset: 27686},
							val:        "autoincrement",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1183, col: 21, offset: 27703},
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 22, offset: 27704},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OnToken",
			pos:  position{line: 1186, col: 1, offset: 27749},
			expr: &actionExpr{
				pos: position{line: 1187, col: 4, offset: 27760},
				run: (*parser).callonOnToken1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 4, offset: 27760},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 4, offset: 27760},
							val:        "on",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1187, col: 10, offset: 27766},
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 11, offset: 27767},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "TrueToken",
			pos:  position{line: 1190, col: 1, offset: 27812},
			expr: &actionExpr{
				pos: position{line: 1191, col: 4, offset: 27825},
				run: (*parser).callonTrueToken1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 4, offset: 27825},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1191, col: 4, offset: 27825},
							val:        "true",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1191, col: 12, offset: 27833},
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 13, offset: 27834},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FalseToken",
			pos:  position{line: 1194, col: 1, offset: 27879},
			expr: &actionExpr{
				pos: position{line: 1195, col: 4, offset: 27893},
				run: (*parser).callonFalseToken1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 4, offset: 27893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1195, col: 4, offset: 27893},
							val:        "false",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1195, col: 13, offset: 27902},
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 14, offset: 27903},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NullToken",
			pos:  position{line: 1198, col: 1, offset: 27948},
			expr: &actionExpr{
				pos: position{line: 1199, col: 4, offset: 27961},
				run: (*parser).callonNullToken1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 4, offset: 27961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1199, col: 4, offset: 27961},
							val:        "null",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1199, col: 12, offset: 27969},
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 13, offset: 27970},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IsToken",
			pos:  position{line: 1202, col: 1, offset: 28015},
			expr: &actionExpr{
				pos: position{line: 1203, col: 4, offset: 28026},
				run: (*parser).callonIsToken1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 4, offset: 28026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1203, col: 4, offset: 28026},
							val:        "is",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1203, col: 10, offset: 28032},
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 11, offset: 28033},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NullsToken",
			pos:  position{line: 1206, col: 1, offset: 28078},
			expr: &actionExpr{
				pos: position{line: 1207, col: 4, offset: 28092},
				run: (*parser).callonNullsToken1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 4, offset: 28092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1207, col: 4, offset: 28092},
							val:        "nulls",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1207, col: 13, offset: 28101},
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 14, offset: 28102},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "LastToken",
			pos:  position{line: 1210, col: 1, offset: 28147},
			expr: &actionExpr{
				pos: position{line: 1211, col: 4, offset: 28160},
				run: (*parser).callonLastToken1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 4, offset: 28160},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1211, col: 4, offset: 28160},
							val:        "last",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1211, col: 12, offset: 28168},
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 13, offset: 28169},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "FirstToken",
			pos:  position{line: 1214, col: 1, offset: 28214},
			expr: &actionExpr{
				pos: position{line: 1215, col: 4, offset: 28228},
				run: (*parser).callonFirstToken1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 4, offset: 28228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1215, col: 4, offset: 28228},
							val:        "first",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1215, col: 13, offset: 28237},
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 14, offset: 28238},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1218, col: 1, offset: 28283},
			expr: &actionExpr{
				pos: position{line: 1219, col: 4, offset: 28295},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 4, offset: 28295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1219, col: 4, offset: 28295},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1219, col: 11, offset: 28302},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 12, offset: 28303},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1222, col: 1, offset: 28348},
			expr: &actionExpr{
				pos: position{line: 1223, col: 4, offset: 28359},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1223, col: 4, offset: 28359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1223, col: 4, offset: 28359},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1223, col: 10, offset: 28365},
							expr: &ruleRefExpr{
								pos:  position{line: 1223, col: 11, offset: 28366},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1226, col: 1, offset: 28411},
			expr: &actionExpr{
				pos: position{line: 1227, col: 4, offset: 28423},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1227, col: 4, offset: 28423},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1227, col: 4, offset: 28423},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1227, col: 11, offset: 28430},
							expr: &ruleRefExpr{
								pos:  position{line: 1227, col: 12, offset: 28431},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1230, col: 1, offset: 28476},
			expr: &actionExpr{
				pos: position{line: 1231, col: 4, offset: 28487},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 4, offset: 28487},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1231, col: 4, offset: 28487},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1231, col: 10, offset: 28493},
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 11, offset: 28494},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "LikeToken",
			pos:  position{line: 1234, col: 1, offset: 28539},
			expr: &actionExpr{
				pos: position{line: 1235, col: 4, offset: 28552},
				run: (*parser).callonLikeToken1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 4, offset: 28552},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 4, offset: 28552},
							val:        "like",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1235, col: 12, offset: 28560},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 13, offset: 28561},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeToken",
			pos:  position{line: 1238, col: 1, offset: 28606},
			expr: &actionExpr{
				pos: position{line: 1239, col: 4, offset: 28621},
				run: (*parser).callonEscapeToken1,
				expr: &seqExpr{
					pos: position{line: 1239, col: 4, offset: 28621},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1239, col: 4, offset: 28621},
							val:        "escape",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1239, col: 14, offset: 28631},
							expr: &ruleRefExpr{
								pos:  position{line: 1239, col: 15, offset: 28632},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AscToken",
			pos:  position{line: 1242, col: 1, offset: 28677},
			expr: &actionExpr{
				pos: position{line: 1243, col: 4, offset: 28689},
				run: (*parser).callonAscToken1,
				expr: &seqExpr{
					pos: position{line: 1243, col: 4, offset: 28689},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1243, col: 4, offset: 28689},
							val:        "asc",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1243, col: 11, offset: 28696},
							expr: &ruleRefExpr{
								pos:  position{line: 1243, col: 12, offset: 28697},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "DescToken",
			pos:  position{line: 1246, col: 1, offset: 28742},
			expr: &actionExpr{
				pos: position{line: 1247, col: 4, offset: 28755},
				run: (*parser).callonDescToken1,
				expr: &seqExpr{
					pos: position{line: 1247, col: 4, offset: 28755},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1247, col: 4, offset: 28755},
							val:        "desc",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1247, col: 12, offset: 28763},
							expr: &ruleRefExpr{
								pos:  position{line: 1247, col: 13, offset: 28764},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "CastToken",
			pos:  position{line: 1250, col: 1, offset: 28809},
			expr: &actionExpr{
				pos: position{line: 1251, col: 4, offset: 28822},
				run: (*parser).callonCastToken1,
				expr: &seqExpr{
					pos: position{line: 1251, col: 4, offset: 28822},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1251, col: 4, offset: 28822},
							val:        "cast",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1251, col: 12, offset: 28830},
							expr: &ruleRefExpr{
								pos:  position{line: 1251, col: 13, offset: 28831},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "AsToken",
			pos:  position{line: 1254, col: 1, offset: 28876},
			expr: &actionExpr{
				pos: position{line: 1255, col: 4, offset: 28887},
				run: (*parser).callonAsToken1,
				expr: &seqExpr{
					pos: position{line: 1255, col: 4, offset: 28887},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1255, col: 4, offset: 28887},
							val:        "as",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1255, col: 10, offset: 28893},
							expr: &ruleRefExpr{
								pos:  position{line: 1255, col: 11, offset: 28894},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "SeparatorToken",
			pos:  position{line: 1258, col: 1, offset: 28939},
			expr: &litMatcher{
				pos:        position{line: 1259, col: 4, offset: 28957},
				val:        ",",
				ignoreCase: false,
			},
		},
		{
			name: "AnyToken",
			pos:  position{line: 1261, col: 1, offset: 28962},
			expr: &litMatcher{
				pos:        position{line: 1262, col: 4, offset: 28974},
				val:        "*",
				ignoreCase: false,
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1265, col: 1, offset: 28997},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 4, offset: 29011},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1266, col: 4, offset: 29011},
						name: "NormalIdentifier",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 4, offset: 29031},
						name: "StringIdentifier",
					},
				},
			},
		},
		{
			name: "NormalIdentifier",
			pos:  position{line: 1269, col: 1, offset: 29049},
			expr: &actionExpr{
				pos: position{line: 1270, col: 4, offset: 29069},
				run: (*parser).callonNormalIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 4, offset: 29069},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1270, col: 4, offset: 29069},
							name: "NormalIdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1270, col: 26, offset: 29091},
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 26, offset: 29091},
								name: "NormalIdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NormalIdentifierStart",
			pos:  position{line: 1279, col: 1, offset: 29278},
			expr: &charClassMatcher{
				pos:        position{line: 1280, col: 4, offset: 29303},
				val:        "[a-zA-Z\\x80-\\xff]",
				ranges:     []rune{'a', 'z', 'A', 'Z', '\u0080', 'ÿ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "NormalIdentifierRest",
			pos:  position{line: 1282, col: 1, offset: 29322},
			expr: &charClassMatcher{
				pos:        position{line: 1283, col: 4, offset: 29346},
				val:        "[a-zA-Z0-9_\\x80-\\xff]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '\u0080', 'ÿ'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "StringIdentifier",
			pos:  position{line: 1285, col: 1, offset: 29369},
			expr: &actionExpr{
				pos: position{line: 1286, col: 4, offset: 29389},
				run: (*parser).callonStringIdentifier1,
				expr: &seqExpr{
					pos: position{line: 1286, col: 4, offset: 29389},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1286, col: 4, offset: 29389},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 9, offset: 29394},
							label: "s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1286, col: 11, offset: 29396},
								expr: &actionExpr{
									pos: position{line: 1286, col: 13, offset: 29398},
									run: (*parser).callonStringIdentifier6,
									expr: &choiceExpr{
										pos: position{line: 1286, col: 15, offset: 29400},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1286, col: 15, offset: 29400},
												val:        "[^\"\\r\\n\\\\]",
												chars:      []rune{'"', '\r', '\n', '\\'},
												ignoreCase: false,
												inverted:   true,
											},
											&seqExpr{
												pos: position{line: 1286, col: 28, offset: 29413},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1286, col: 28, offset: 29413},
														val:        "\\",
														ignoreCase: false,
													},
													&anyMatcher{
														line: 1286, col: 33, offset: 29418,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1286, col: 63, offset: 29448},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 1312, col: 1, offset: 30069},
			expr: &actionExpr{
				pos: position{line: 1313, col: 4, offset: 30074},
				run: (*parser).callon_1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1313, col: 4, offset: 30074},
					expr: &ruleRefExpr{
						pos:  position{line: 1313, col: 4, offset: 30074},
						name: "Whitespace",
					},
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 1316, col: 1, offset: 30110},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 4, offset: 30124},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1317, col: 4, offset: 30124},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1318, col: 4, offset: 30145},
						val:        "\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1319, col: 4, offset: 30166},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1320, col: 4, offset: 30187},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1321, col: 4, offset: 30208},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1322, col: 4, offset: 30229},
						val:        " ",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1324, col: 1, offset: 30251},
			expr: &notExpr{
				pos: position{line: 1325, col: 4, offset: 30258},
				expr: &anyMatcher{
					line: 1325, col: 5, offset: 30259,
				},
			},
		},
	},
}

func (c *current) onS10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonS10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS10(stack["s"])
}

func (c *current) onS1(x, xs interface{}) (interface{}, error) {
	nodeSlice := prepend(x, assertSlice(xs))
	stmtSlice := make([]ast.StmtNode, len(nodeSlice))
	for idx := range nodeSlice {
		if nodeSlice[idx] != nil {
			stmtSlice[idx] = nodeSlice[idx].(ast.StmtNode)
		} else {
			stmtSlice[idx] = nil
		}
	}
	return stmtSlice, nil
}

func (p *parser) callonS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onS1(stack["x"], stack["xs"])
}

func (c *current) onSelectStmt10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSelectStmt10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt10(stack["s"])
}

func (c *current) onSelectStmt19(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonSelectStmt19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt19(stack["i"])
}

func (c *current) onSelectStmt28(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonSelectStmt28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt28(stack["w"])
}

func (c *current) onSelectStmt35(g interface{}) (interface{}, error) {
	return g, nil
}

func (p *parser) callonSelectStmt35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt35(stack["g"])
}

func (c *current) onSelectStmt42(or interface{}) (interface{}, error) {
	return or, nil
}

func (p *parser) callonSelectStmt42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt42(stack["or"])
}

func (c *current) onSelectStmt49(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSelectStmt49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt49(stack["l"])
}

func (c *current) onSelectStmt56(of interface{}) (interface{}, error) {
	return of, nil
}

func (p *parser) callonSelectStmt56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt56(stack["of"])
}

func (c *current) onSelectStmt1(v, f, fs, table, where, group, order, limit, offset interface{}) (interface{}, error) {
	node := &ast.SelectStmtNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SetVerb(v.([]byte))
	columnSlice := assertSlice(fs)
	node.Column = make([]ast.ExprWithAnyNode, len(columnSlice)+1)
	node.Column[0] = f.(ast.ExprWithAnyNode)
	for idx := range columnSlice {
		node.Column[idx+1] = columnSlice[idx].(ast.ExprWithAnyNode)
	}
	if table != nil {
		node.Table = table.(*ast.IdentifierNode)
	}
	if where != nil {
		node.Where = where.(*ast.WhereOptionNode)
	}
	groupSlice := assertSlice(group)
	node.Group = make([]*ast.GroupOptionNode, len(groupSlice))
	for idx := range groupSlice {
		node.Group[idx] = groupSlice[idx].(*ast.GroupOptionNode)
	}
	orderSlice := assertSlice(order)
	node.Order = make([]*ast.OrderOptionNode, len(orderSlice))
	for idx := range orderSlice {
		node.Order[idx] = orderSlice[idx].(*ast.OrderOptionNode)
	}
	if limit != nil {
		node.Limit = limit.(*ast.LimitOptionNode)
	}
	if offset != nil {
		node.Offset = offset.(*ast.OffsetOptionNode)
	}
	return node, nil
}

func (p *parser) callonSelectStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectStmt1(stack["v"], stack["f"], stack["fs"], stack["table"], stack["where"], stack["group"], stack["order"], stack["limit"], stack["offset"])
}

func (c *current) onUpdateStmt15(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonUpdateStmt15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt15(stack["s"])
}

func (c *current) onUpdateStmt24(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonUpdateStmt24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt24(stack["w"])
}

func (c *current) onUpdateStmt1(v, table, a, as, where interface{}) (interface{}, error) {
	node := &ast.UpdateStmtNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SetVerb(v.([]byte))
	node.Table = table.(*ast.IdentifierNode)
	assignSlice := prepend(a, assertSlice(as))
	node.Assignment = make([]*ast.AssignOperatorNode, len(assignSlice))
	for idx := range assignSlice {
		node.Assignment[idx] = assignSlice[idx].(*ast.AssignOperatorNode)
	}
	if where != nil {
		node.Where = where.(*ast.WhereOptionNode)
	}
	return node, nil
}

func (p *parser) callonUpdateStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateStmt1(stack["v"], stack["table"], stack["a"], stack["as"], stack["where"])
}

func (c *current) onDeleteStmt14(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDeleteStmt14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteStmt14(stack["w"])
}

func (c *current) onDeleteStmt1(v1, v2, v3, table, where interface{}) (interface{}, error) {
	node := &ast.DeleteStmtNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SetVerb(bytes.Join([][]byte{
		v1.([]byte), v2.([]byte), v3.([]byte)}, nil))
	node.Table = table.(*ast.IdentifierNode)
	if where != nil {
		node.Where = where.(*ast.WhereOptionNode)
	}
	return node, nil
}

func (p *parser) callonDeleteStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteStmt1(stack["v1"], stack["v2"], stack["v3"], stack["table"], stack["where"])
}

func (c *current) onInsertStmt1(v1, v2, v3, table, insert interface{}) (interface{}, error) {
	node := &ast.InsertStmtNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SetVerb(bytes.Join([][]byte{
		v1.([]byte), v2.([]byte), v3.([]byte)}, nil))
	node.Table = table.(*ast.IdentifierNode)
	switch i := insert.(ast.InsertOptionNode).(type) {
	case *ast.InsertWithColumnOptionNode:
		node.Insert = i
	case *ast.InsertWithDefaultOptionNode:
		node.Insert = i
	default:
		panic(fmt.Sprintf("unknown insert type %T", insert))
	}
	return node, nil
}

func (p *parser) callonInsertStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertStmt1(stack["v1"], stack["v2"], stack["v3"], stack["table"], stack["insert"])
}

func (c *current) onInsertValue1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonInsertValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertValue1(stack["e"])
}

func (c *current) onCreateTableStmt23(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonCreateTableStmt23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt23(stack["t"])
}

func (c *current) onCreateTableStmt17(s, ss interface{}) (interface{}, error) {
	return prepend(s, assertSlice(ss)), nil
}

func (p *parser) callonCreateTableStmt17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt17(stack["s"], stack["ss"])
}

func (c *current) onCreateTableStmt1(v1, v2, v3, table, column interface{}) (interface{}, error) {
	node := &ast.CreateTableStmtNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SetVerb(bytes.Join([][]byte{
		v1.([]byte), v2.([]byte), v3.([]byte)}, nil))
	node.Table = table.(*ast.IdentifierNode)
	columnSlice := assertSlice(column)
	node.Column = make([]*ast.ColumnSchemaNode, len(columnSlice))
	for idx := range columnSlice {
		node.Column[idx] = columnSlice[idx].(*ast.ColumnSchemaNode)
	}
	return node, nil
}

func (p *parser) callonCreateTableStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateTableStmt1(stack["v1"], stack["v2"], stack["v3"], stack["table"], stack["column"])
}

func (c *current) onColumnSchema10(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonColumnSchema10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnSchema10(stack["s"])
}

func (c *current) onColumnSchema1(i, t, cs interface{}) (interface{}, error) {
	node := &ast.ColumnSchemaNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Column = i.(*ast.IdentifierNode)
	node.DataType = t.(ast.TypeNode)
	constraintSlice := assertSlice(cs)
	node.Constraint = make([]ast.ColumnConstraintNode, len(constraintSlice))
	for idx, constraint := range constraintSlice {
		switch c := constraint.(ast.ColumnConstraintNode).(type) {
		case *ast.PrimaryOptionNode:
			node.Constraint[idx] = c
		case *ast.NotNullOptionNode:
			node.Constraint[idx] = c
		case *ast.UniqueOptionNode:
			node.Constraint[idx] = c
		case *ast.DefaultOptionNode:
			node.Constraint[idx] = c
		case *ast.ForeignOptionNode:
			node.Constraint[idx] = c
		case *ast.AutoIncrementOptionNode:
			node.Constraint[idx] = c
		default:
			panic(fmt.Sprintf("unknown constraint type %T", c))
		}
	}
	return node, nil
}

func (p *parser) callonColumnSchema1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColumnSchema1(stack["i"], stack["t"], stack["cs"])
}

func (c *current) onCreateIndexStmt7(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonCreateIndexStmt7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt7(stack["u"])
}

func (c *current) onCreateIndexStmt31(x interface{}) (interface{}, error) {
	return x, nil
}

func (p *parser) callonCreateIndexStmt31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt31(stack["x"])
}

func (c *current) onCreateIndexStmt1(v1, unique, v2, v3, index, table, i, is interface{}) (interface{}, error) {
	node := &ast.CreateIndexStmtNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SetVerb(bytes.Join([][]byte{
		v1.([]byte), v2.([]byte), v3.([]byte)}, nil))
	node.Index = index.(*ast.IdentifierNode)
	node.Table = table.(*ast.IdentifierNode)
	columnSlice := assertSlice(prepend(i, assertSlice(is)))
	node.Column = make([]*ast.IdentifierNode, len(columnSlice))
	for idx := range columnSlice {
		node.Column[idx] = columnSlice[idx].(*ast.IdentifierNode)
	}
	if unique != nil {
		node.Unique = unique.(*ast.UniqueOptionNode)
	}
	return node, nil
}

func (p *parser) callonCreateIndexStmt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateIndexStmt1(stack["v1"], stack["unique"], stack["v2"], stack["v3"], stack["index"], stack["table"], stack["i"], stack["is"])
}

func (c *current) onWhereClause1(e interface{}) (interface{}, error) {
	node := &ast.WhereOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Condition = e.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["e"])
}

func (c *current) onOrderByClause11(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonOrderByClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause11(stack["s"])
}

func (c *current) onOrderByClause1(f, fs interface{}) (interface{}, error) {
	return prepend(f, assertSlice(fs)), nil
}

func (p *parser) callonOrderByClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderByClause1(stack["f"], stack["fs"])
}

func (c *current) onOrderColumn7(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOrderColumn7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn7(stack["t"])
}

func (c *current) onOrderColumn16(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonOrderColumn16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn16(stack["l"])
}

func (c *current) onOrderColumn1(i, s, n interface{}) (interface{}, error) {
	node := &ast.OrderOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Expr = i.(ast.ExprNode)
	node.Desc = s != nil && bytes.EqualFold(s.([]byte), []byte("DESC"))
	node.NullsFirst = n != nil && bytes.EqualFold(n.([]byte), []byte("FIRST"))
	return node, nil
}

func (p *parser) callonOrderColumn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderColumn1(stack["i"], stack["s"], stack["n"])
}

func (c *current) onGroupByClause11(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonGroupByClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByClause11(stack["s"])
}

func (c *current) onGroupByClause1(f, fs interface{}) (interface{}, error) {
	return prepend(f, assertSlice(fs)), nil
}

func (p *parser) callonGroupByClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByClause1(stack["f"], stack["fs"])
}

func (c *current) onGroupColumn1(i interface{}) (interface{}, error) {
	node := &ast.GroupOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Expr = i.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonGroupColumn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupColumn1(stack["i"])
}

func (c *current) onOffsetClause1(i interface{}) (interface{}, error) {
	node := &ast.OffsetOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Value = i.(*ast.IntegerValueNode)
	return node, nil
}

func (p *parser) callonOffsetClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetClause1(stack["i"])
}

func (c *current) onLimitClause1(i interface{}) (interface{}, error) {
	node := &ast.LimitOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Value = i.(*ast.IntegerValueNode)
	return node, nil
}

func (p *parser) callonLimitClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitClause1(stack["i"])
}

func (c *current) onInsertWithColumnClause13(x interface{}) (interface{}, error) {
	return x, nil
}

func (p *parser) callonInsertWithColumnClause13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause13(stack["x"])
}

func (c *current) onInsertWithColumnClause5(f, fs interface{}) (interface{}, error) {
	return prepend(f, assertSlice(fs)), nil
}

func (p *parser) callonInsertWithColumnClause5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause5(stack["f"], stack["fs"])
}

func (c *current) onInsertWithColumnClause29(y interface{}) (interface{}, error) {
	return y, nil
}

func (p *parser) callonInsertWithColumnClause29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause29(stack["y"])
}

func (c *current) onInsertWithColumnClause1(cs, v, vs interface{}) (interface{}, error) {
	node := &ast.InsertWithColumnOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	columnSlice := assertSlice(cs)
	node.Column = make([]*ast.IdentifierNode, len(columnSlice))
	for idx := range columnSlice {
		node.Column[idx] = columnSlice[idx].(*ast.IdentifierNode)
	}
	valueSlice := assertSlice(vs)
	node.Value = make([][]ast.ExprWithDefaultNode, len(valueSlice)+1)
	node.Value[0] = v.([]ast.ExprWithDefaultNode)
	for idx := range valueSlice {
		node.Value[idx+1] = valueSlice[idx].([]ast.ExprWithDefaultNode)
	}
	return node, nil
}

func (p *parser) callonInsertWithColumnClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithColumnClause1(stack["cs"], stack["v"], stack["vs"])
}

func (c *current) onInsertWithDefaultClause1() (interface{}, error) {
	node := &ast.InsertWithDefaultOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonInsertWithDefaultClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertWithDefaultClause1()
}

func (c *current) onPrimaryKeyClause1() (interface{}, error) {
	node := &ast.PrimaryOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonPrimaryKeyClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryKeyClause1()
}

func (c *current) onNotNullClause1() (interface{}, error) {
	node := &ast.NotNullOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonNotNullClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotNullClause1()
}

func (c *current) onUniqueClause1() (interface{}, error) {
	node := &ast.UniqueOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonUniqueClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqueClause1()
}

func (c *current) onDefaultClause1(e interface{}) (interface{}, error) {
	node := &ast.DefaultOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Value = e.(ast.ExprNode)
	return node, nil
}

func (p *parser) callonDefaultClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultClause1(stack["e"])
}

func (c *current) onForeignClause1(t, f interface{}) (interface{}, error) {
	node := &ast.ForeignOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Table = t.(*ast.IdentifierNode)
	node.Column = f.(*ast.IdentifierNode)
	return node, nil
}

func (p *parser) callonForeignClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForeignClause1(stack["t"], stack["f"])
}

func (c *current) onAutoincrementClause1() (interface{}, error) {
	node := &ast.AutoIncrementOptionNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonAutoincrementClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAutoincrementClause1()
}

func (c *current) onExprWithDefault2(d interface{}) (interface{}, error) {
	return d, nil
}

func (p *parser) callonExprWithDefault2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprWithDefault2(stack["d"])
}

func (c *current) onLogicExpr47(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr47(stack["op"], stack["s"])
}

func (c *current) onLogicExpr41(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonLogicExpr41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr41(stack["o"], stack["os"])
}

func (c *current) onLogicExpr37(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr37(stack["op"], stack["s"])
}

func (c *current) onLogicExpr31(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonLogicExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr31(stack["o"], stack["os"])
}

func (c *current) onLogicExpr22(op, s interface{}) (interface{}, error) {
	return opSetTarget(op.(ast.UnaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr22(stack["op"], stack["s"])
}

func (c *current) onLogicExpr17(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonLogicExpr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr17(stack["l"])
}

func (c *current) onLogicExpr11(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonLogicExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr11(stack["o"], stack["os"])
}

func (c *current) onLogicExpr1In5(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1In5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1In5(stack["t"])
}

func (c *current) onLogicExpr1In1(n, s interface{}) (interface{}, error) {
	node := &ast.InOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Right = s.([]ast.ExprNode)
	if n != nil {
		return opSetTarget(n.(ast.UnaryOperator), node), nil
	}
	return node, nil
}

func (p *parser) callonLogicExpr1In1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1In1(stack["n"], stack["s"])
}

func (c *current) onLogicExpr1Is6(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1Is6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Is6(stack["t"])
}

func (c *current) onLogicExpr1Is1(n, u interface{}) (interface{}, error) {
	node := &ast.IsOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	opSetSubject(node, u.(*ast.NullValueNode))
	if n != nil {
		return opSetTarget(n.(ast.UnaryOperator), node), nil
	}
	return node, nil
}

func (p *parser) callonLogicExpr1Is1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Is1(stack["n"], stack["u"])
}

func (c *current) onLogicExpr1Like5(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonLogicExpr1Like5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like5(stack["t"])
}

func (c *current) onLogicExpr1Like16(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonLogicExpr1Like16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like16(stack["e"])
}

func (c *current) onLogicExpr1Like1(n, s, escape interface{}) (interface{}, error) {
	node := &ast.LikeOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	opSetSubject(node, s.(ast.ExprNode))
	if escape != nil {
		node.Escape = escape.(ast.ExprNode)
	}
	if n != nil {
		return opSetTarget(n.(ast.UnaryOperator), node), nil
	}
	return node, nil
}

func (p *parser) callonLogicExpr1Like1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Like1(stack["n"], stack["s"], stack["escape"])
}

func (c *current) onLogicExpr1Cmp1(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonLogicExpr1Cmp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicExpr1Cmp1(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr37(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonArithmeticExpr37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr37(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr31(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonArithmeticExpr31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr31(stack["o"], stack["os"])
}

func (c *current) onArithmeticExpr27(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonArithmeticExpr27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr27(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr21(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonArithmeticExpr21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr21(stack["o"], stack["os"])
}

func (c *current) onArithmeticExpr17(op, s interface{}) (interface{}, error) {
	return opSetSubject(op.(ast.BinaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonArithmeticExpr17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr17(stack["op"], stack["s"])
}

func (c *current) onArithmeticExpr11(o, os interface{}) (interface{}, error) {
	return rightJoinOperators(o.(ast.ExprNode), assertExprSlice(os)), nil
}

func (p *parser) callonArithmeticExpr11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArithmeticExpr11(stack["o"], stack["os"])
}

func (c *current) onMultiExpr7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMultiExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExpr7(stack["e"])
}

func (c *current) onMultiExpr1(x, xs interface{}) (interface{}, error) {
	return assertExprSlice(prepend(x, assertSlice(xs))), nil
}

func (p *parser) callonMultiExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExpr1(stack["x"], stack["xs"])
}

func (c *current) onMultiExprWithDefault7(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMultiExprWithDefault7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExprWithDefault7(stack["e"])
}

func (c *current) onMultiExprWithDefault1(x, xs interface{}) (interface{}, error) {
	s := assertSlice(xs)
	es := make([]ast.ExprWithDefaultNode, len(s)+1)
	es[0] = x.(ast.ExprWithDefaultNode)
	for idx := range s {
		es[idx+1] = s[idx].(ast.ExprWithDefaultNode)
	}
	return es, nil
}

func (p *parser) callonMultiExprWithDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiExprWithDefault1(stack["x"], stack["xs"])
}

func (c *current) onOperand2(op, s interface{}) (interface{}, error) {
	return opSetTarget(op.(ast.UnaryOperator), s.(ast.ExprNode)), nil
}

func (p *parser) callonOperand2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand2(stack["op"], stack["s"])
}

func (c *current) onOperand9(e interface{}) (interface{}, error) {
	node := &ast.ParenOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	opSetTarget(node, e.(ast.ExprNode))
	return node, nil

}

func (p *parser) callonOperand9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand9(stack["e"])
}

func (c *current) onOperand17(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOperand17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperand17(stack["t"])
}

func (c *current) onTypeCast1(o, s interface{}) (interface{}, error) {
	node := &ast.CastOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.SourceExpr = o.(ast.ExprNode)
	node.TargetType = s.(ast.TypeNode)
	return node, nil
}

func (p *parser) callonTypeCast1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeCast1(stack["o"], stack["s"])
}

func (c *current) onFunctionCall1(i, r interface{}) (interface{}, error) {
	node := &ast.FunctionOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Name = i.(*ast.IdentifierNode)
	switch a := r.(type) {
	case nil:
		node.Args = nil
	case *ast.AnySymbolNode:
		node.Args = []ast.ExprWithAnyNode{a}
	case []ast.ExprNode:
		node.Args = make([]ast.ExprWithAnyNode, len(a))
		for idx := range a {
			node.Args[idx] = a[idx]
		}
	default:
		panic(fmt.Sprintf("unexpected function arguments type %T", r))
	}
	return node, nil
}

func (p *parser) callonFunctionCall1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionCall1(stack["i"], stack["r"])
}

func (c *current) onAssignment1(i, e interface{}) (interface{}, error) {
	node := &ast.AssignOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Column = i.(*ast.IdentifierNode)
	node.Expr = e.(ast.ExprWithDefaultNode)
	return node, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["i"], stack["e"])
}

func (c *current) onSignOperator1() (interface{}, error) {
	var node ast.UnaryOperator
	switch string(c.text) {
	case "+":
		node = &ast.PosOperatorNode{}
	case "-":
		node = &ast.NegOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown sign %s", c.text))
	}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonSignOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSignOperator1()
}

func (c *current) onNotOperator1() (interface{}, error) {
	node := &ast.NotOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonNotOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotOperator1()
}

func (c *current) onAndOperator1() (interface{}, error) {
	node := &ast.AndOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonAndOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndOperator1()
}

func (c *current) onOrOperator1() (interface{}, error) {
	node := &ast.OrOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonOrOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrOperator1()
}

func (c *current) onCmpOperator1() (interface{}, error) {
	var node ast.BinaryOperator
	switch string(c.text) {
	case "<=":
		node = &ast.LessOrEqualOperatorNode{}
	case ">=":
		node = &ast.GreaterOrEqualOperatorNode{}
	case "<>":
		node = &ast.NotEqualOperatorNode{}
	case "!=":
		node = &ast.NotEqualOperatorNode{}
	case "<":
		node = &ast.LessOperatorNode{}
	case ">":
		node = &ast.GreaterOperatorNode{}
	case "=":
		node = &ast.EqualOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown comparison operator %s", c.text))
	}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonCmpOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCmpOperator1()
}

func (c *current) onConcatOperator1() (interface{}, error) {
	node := &ast.ConcatOperatorNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonConcatOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcatOperator1()
}

func (c *current) onAddSubOperator1() (interface{}, error) {
	var node ast.BinaryOperator
	switch string(c.text) {
	case "+":
		node = &ast.AddOperatorNode{}
	case "-":
		node = &ast.SubOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown addition or subtraction operator %s", c.text))
	}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonAddSubOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddSubOperator1()
}

func (c *current) onMulDivModOperator1() (interface{}, error) {
	var node ast.BinaryOperator
	switch string(c.text) {
	case "*":
		node = &ast.MulOperatorNode{}
	case "/":
		node = &ast.DivOperatorNode{}
	case "%":
		node = &ast.ModOperatorNode{}
	default:
		panic(fmt.Sprintf("unknown multiplication, division, modulo operator: %s", c.text))
	}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonMulDivModOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMulDivModOperator1()
}

func (c *current) onUIntType1(s interface{}) (interface{}, error) {
	node := &ast.IntTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Unsigned = true
	size, code := toUint(s.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "UIntType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonUIntType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntType1(stack["s"])
}

func (c *current) onIntType1(s interface{}) (interface{}, error) {
	node := &ast.IntTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Unsigned = false
	size, code := toUint(s.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "IntType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonIntType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntType1(stack["s"])
}

func (c *current) onUFixedType1(s, t interface{}) (interface{}, error) {
	node := &ast.FixedTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Unsigned = true
	size, code := toUint(s.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "UFixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	fractionalDigits, code := toUint(t.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "UFixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", t, code),
		}
		return node, err
	}
	node.Size = size
	node.FractionalDigits = fractionalDigits
	return node, nil
}

func (p *parser) callonUFixedType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUFixedType1(stack["s"], stack["t"])
}

func (c *current) onFixedType1(s, t interface{}) (interface{}, error) {
	node := &ast.FixedTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Unsigned = false
	size, code := toUint(s.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "FixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	fractionalDigits, code := toUint(t.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "FixedType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", t, code),
		}
		return node, err
	}
	node.Size = size
	node.FractionalDigits = fractionalDigits
	return node, nil
}

func (p *parser) callonFixedType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedType1(stack["s"], stack["t"])
}

func (c *current) onFixedBytesType2(s interface{}) (interface{}, error) {
	node := &ast.FixedBytesTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	size, code := toUint(s.([]byte))
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "FixedBytesType",
			Message:  fmt.Sprintf("cannot parse %s as uint32: %v", s, code),
		}
		return node, err
	}
	node.Size = size
	return node, nil
}

func (p *parser) callonFixedBytesType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedBytesType2(stack["s"])
}

func (c *current) onFixedBytesType9() (interface{}, error) {
	node := &ast.FixedBytesTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Size = 1
	return node, nil
}

func (p *parser) callonFixedBytesType9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixedBytesType9()
}

func (c *current) onDynamicBytesType1() (interface{}, error) {
	node := &ast.DynamicBytesTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonDynamicBytesType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDynamicBytesType1()
}

func (c *current) onAddressType1() (interface{}, error) {
	node := &ast.AddressTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonAddressType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressType1()
}

func (c *current) onBoolType1() (interface{}, error) {
	node := &ast.BoolTypeNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonBoolType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolType1()
}

func (c *current) onAnyLiteral1() (interface{}, error) {
	node := &ast.AnySymbolNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonAnyLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyLiteral1()
}

func (c *current) onDefaultLiteral1() (interface{}, error) {
	node := &ast.DefaultSymbolNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonDefaultLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultLiteral1()
}

func (c *current) onBoolLiteral1(b interface{}) (interface{}, error) {
	node := &ast.BoolValueNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	if bytes.EqualFold(b.([]byte), []byte("TRUE")) {
		node.V = ast.BoolValueTrue
	} else {
		node.V = ast.BoolValueFalse
	}
	return node, nil
}

func (p *parser) callonBoolLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolLiteral1(stack["b"])
}

func (c *current) onNullLiteral1() (interface{}, error) {
	node := &ast.NullValueNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onNumberLiteral2(h interface{}) (interface{}, error) {
	return h, nil
}

func (p *parser) callonNumberLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumberLiteral2(stack["h"])
}

func (c *current) onIntegerLiteral1() (interface{}, error) {
	node := &ast.IntegerValueNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.IsAddress = false
	v, code := toDecimal(c.text)
	if code != se.ErrorCodeNil {
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "IntegerLiteral",
			Message:  fmt.Sprintf("cannot parse %s as decimal: %v", c.text, code),
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1()
}

func (c *current) onNonZeroLeadingInteger1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNonZeroLeadingInteger1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonZeroLeadingInteger1()
}

func (c *current) onFixnum1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonFixnum1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFixnum1()
}

func (c *current) onDecimal1(m, e interface{}) (interface{}, error) {
	var node ast.ExprNode
	var err error
	integer := bytes.IndexByte(m.([]byte), '.') == -1 && e == nil
	v, code := toDecimal(c.text)
	if code != se.ErrorCodeNil {
		err = se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "Decimal",
			Message:  fmt.Sprintf("cannot parse %s as decimal: %v", c.text, code),
		}
	}
	if integer {
		realNode := &ast.IntegerValueNode{}
		realNode.SetPosition(uint32(c.pos.offset))
		realNode.SetLength(uint32(len(c.text)))
		realNode.IsAddress = false
		if err == nil {
			realNode.V = v
		}
		node = realNode
	} else {
		realNode := &ast.DecimalValueNode{}
		realNode.SetPosition(uint32(c.pos.offset))
		realNode.SetLength(uint32(len(c.text)))
		if err == nil {
			realNode.V = v
		}
		node = realNode
	}
	return node, err
}

func (p *parser) callonDecimal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDecimal1(stack["m"], stack["e"])
}

func (c *current) onHex1() (interface{}, error) {
	node := hexToInteger(c.text)
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	return node, nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onHexString9() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonHexString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexString9()
}

func (c *current) onHexString1(s interface{}) (interface{}, error) {
	node := &ast.BytesValueNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.V = hexToBytes(joinBytes(assertSlice(s)))
	return node, nil
}

func (p *parser) callonHexString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexString1(stack["s"])
}

func (c *current) onNormalString6() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNormalString6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalString6()
}

func (c *current) onNormalString1(s interface{}) (interface{}, error) {
	node := &ast.BytesValueNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	bs := joinBytes(assertSlice(s))
	v, bad, code := resolveString(bs)
	if code != se.ErrorCodeNil {
		msg := fmt.Sprintf("cannot resolve escape sequence '%s': %v",
			sanitizeBadEscape(bad), code)
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "NormalString",
			Message:  msg,
		}
		return node, err
	}
	node.V = v
	return node, nil
}

func (p *parser) callonNormalString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalString1(stack["s"])
}

func (c *current) onSelectToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonSelectToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectToken1()
}

func (c *current) onFromToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonFromToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFromToken1()
}

func (c *current) onWhereToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonWhereToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereToken1()
}

func (c *current) onOrderToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonOrderToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onGroupToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonGroupToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupToken1()
}

func (c *current) onLimitToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonLimitToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitToken1()
}

func (c *current) onOffsetToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonOffsetToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOffsetToken1()
}

func (c *current) onUpdateToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonUpdateToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpdateToken1()
}

func (c *current) onSetToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonSetToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSetToken1()
}

func (c *current) onDeleteToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonDeleteToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeleteToken1()
}

func (c *current) onInsertToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonInsertToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInsertToken1()
}

func (c *current) onIntoToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonIntoToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntoToken1()
}

func (c *current) onValuesToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonValuesToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValuesToken1()
}

func (c *current) onCreateToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonCreateToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCreateToken1()
}

func (c *current) onTableToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonTableToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableToken1()
}

func (c *current) onIndexToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonIndexToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexToken1()
}

func (c *current) onUniqueToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonUniqueToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqueToken1()
}

func (c *current) onDefaultToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonDefaultToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultToken1()
}

func (c *current) onPrimaryToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonPrimaryToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimaryToken1()
}

func (c *current) onKeyToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonKeyToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyToken1()
}

func (c *current) onReferencesToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonReferencesToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReferencesToken1()
}

func (c *current) onAutoincrementToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonAutoincrementToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAutoincrementToken1()
}

func (c *current) onOnToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonOnToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOnToken1()
}

func (c *current) onTrueToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonTrueToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrueToken1()
}

func (c *current) onFalseToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonFalseToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFalseToken1()
}

func (c *current) onNullToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNullToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullToken1()
}

func (c *current) onIsToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonIsToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIsToken1()
}

func (c *current) onNullsToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNullsToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullsToken1()
}

func (c *current) onLastToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonLastToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLastToken1()
}

func (c *current) onFirstToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonFirstToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstToken1()
}

func (c *current) onAndToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onLikeToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonLikeToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLikeToken1()
}

func (c *current) onEscapeToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonEscapeToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeToken1()
}

func (c *current) onAscToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonAscToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAscToken1()
}

func (c *current) onDescToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonDescToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDescToken1()
}

func (c *current) onCastToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonCastToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastToken1()
}

func (c *current) onAsToken1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonAsToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsToken1()
}

func (c *current) onNormalIdentifier1() (interface{}, error) {
	node := &ast.IdentifierNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	node.Name = decodeString(c.text)
	return node, nil
}

func (p *parser) callonNormalIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalIdentifier1()
}

func (c *current) onStringIdentifier6() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callonStringIdentifier6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringIdentifier6()
}

func (c *current) onStringIdentifier1(s interface{}) (interface{}, error) {
	node := &ast.IdentifierNode{}
	node.SetPosition(uint32(c.pos.offset))
	node.SetLength(uint32(len(c.text)))
	bs := joinBytes(assertSlice(s))
	name, bad, code := resolveString(bs)
	if code != se.ErrorCodeNil {
		msg := fmt.Sprintf("cannot resolve escape sequence '%s': %v",
			sanitizeBadEscape(bad), code)
		err := se.Error{
			Position: uint32(c.pos.offset),
			Length:   uint32(len(c.text)),
			Category: se.ErrorCategoryGrammar,
			Code:     code,
			Severity: se.ErrorSeverityError,
			Prefix:   "StringIdentifier",
			Message:  msg,
		}
		return node, err
	}
	node.Name = name
	return node, nil
}

func (p *parser) callonStringIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringIdentifier1(stack["s"])
}

func (c *current) on_1() (interface{}, error) {
	return c.text, nil
}

func (p *parser) callon_1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.on_1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
